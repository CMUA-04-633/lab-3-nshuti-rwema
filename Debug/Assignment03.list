
Assignment03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000450c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080046c8  080046c8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046c8  080046c8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080046d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000006c  0800473c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  0800473c  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b7e1  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d52  00000000  00000000  0002b8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0002d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c6  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d53  00000000  00000000  0002ea1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df88  00000000  00000000  00046771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089d2e  00000000  00000000  000546f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000348c  00000000  00000000  000de428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e18b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004604 	.word	0x08004604

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08004604 	.word	0x08004604

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000776:	4a38      	ldr	r2, [pc, #224]	; (8000858 <HD44780_Init+0xec>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800077c:	4b37      	ldr	r3, [pc, #220]	; (800085c <HD44780_Init+0xf0>)
 800077e:	2208      	movs	r2, #8
 8000780:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <HD44780_Init+0xf4>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000788:	4b33      	ldr	r3, [pc, #204]	; (8000858 <HD44780_Init+0xec>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d907      	bls.n	80007a0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <HD44780_Init+0xf4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <HD44780_Init+0xf4>)
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e006      	b.n	80007ae <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <HD44780_Init+0xf4>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <HD44780_Init+0xf4>)
 80007ac:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80007ae:	f000 f985 	bl	8000abc <DelayInit>
  HAL_Delay(50);
 80007b2:	2032      	movs	r0, #50	; 0x32
 80007b4:	f000 fee0 	bl	8001578 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <HD44780_Init+0xf0>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f943 	bl	8000a48 <ExpanderWrite>
  HAL_Delay(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f000 fed7 	bl	8001578 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80007ca:	2030      	movs	r0, #48	; 0x30
 80007cc:	f000 f92b 	bl	8000a26 <Write4Bits>
  DelayUS(4500);
 80007d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80007d4:	f000 f99a 	bl	8000b0c <DelayUS>

  Write4Bits(0x03 << 4);
 80007d8:	2030      	movs	r0, #48	; 0x30
 80007da:	f000 f924 	bl	8000a26 <Write4Bits>
  DelayUS(4500);
 80007de:	f241 1094 	movw	r0, #4500	; 0x1194
 80007e2:	f000 f993 	bl	8000b0c <DelayUS>

  Write4Bits(0x03 << 4);
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f000 f91d 	bl	8000a26 <Write4Bits>
  DelayUS(4500);
 80007ec:	f241 1094 	movw	r0, #4500	; 0x1194
 80007f0:	f000 f98c 	bl	8000b0c <DelayUS>

  Write4Bits(0x02 << 4);
 80007f4:	2020      	movs	r0, #32
 80007f6:	f000 f916 	bl	8000a26 <Write4Bits>
  DelayUS(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f000 f986 	bl	8000b0c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HD44780_Init+0xf4>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f8ce 	bl	80009ac <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HD44780_Init+0xf8>)
 8000812:	2204      	movs	r2, #4
 8000814:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000816:	f000 f875 	bl	8000904 <HD44780_Display>
  HD44780_Clear();
 800081a:	f000 f82b 	bl	8000874 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HD44780_Init+0xfc>)
 8000820:	2202      	movs	r2, #2
 8000822:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HD44780_Init+0xfc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f8bc 	bl	80009ac <SendCommand>
  DelayUS(4500);
 8000834:	f241 1094 	movw	r0, #4500	; 0x1194
 8000838:	f000 f968 	bl	8000b0c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800083c:	490b      	ldr	r1, [pc, #44]	; (800086c <HD44780_Init+0x100>)
 800083e:	2000      	movs	r0, #0
 8000840:	f000 f876 	bl	8000930 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000844:	490a      	ldr	r1, [pc, #40]	; (8000870 <HD44780_Init+0x104>)
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f872 	bl	8000930 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800084c:	f000 f81d 	bl	800088a <HD44780_Home>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000008b 	.word	0x2000008b
 800085c:	2000008c 	.word	0x2000008c
 8000860:	20000088 	.word	0x20000088
 8000864:	20000089 	.word	0x20000089
 8000868:	2000008a 	.word	0x2000008a
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008

08000874 <HD44780_Clear>:

void HD44780_Clear()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 f897 	bl	80009ac <SendCommand>
  DelayUS(2000);
 800087e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000882:	f000 f943 	bl	8000b0c <DelayUS>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <HD44780_Home>:

void HD44780_Home()
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800088e:	2002      	movs	r0, #2
 8000890:	f000 f88c 	bl	80009ac <SendCommand>
  DelayUS(2000);
 8000894:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000898:	f000 f938 	bl	8000b0c <DelayUS>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	460a      	mov	r2, r1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HD44780_SetCursor+0x5c>)
 80008b2:	f107 0408 	add.w	r4, r7, #8
 80008b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <HD44780_SetCursor+0x60>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d303      	bcc.n	80008ce <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HD44780_SetCursor+0x60>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	3318      	adds	r3, #24
 80008d4:	443b      	add	r3, r7
 80008d6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4413      	add	r3, r2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f85d 	bl	80009ac <SendCommand>
}
 80008f2:	bf00      	nop
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	0800461c 	.word	0x0800461c
 8000900:	2000008b 	.word	0x2000008b

08000904 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HD44780_Display+0x28>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HD44780_Display+0x28>)
 8000914:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <HD44780_Display+0x28>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f843 	bl	80009ac <SendCommand>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000089 	.word	0x20000089

08000930 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	b25b      	sxtb	r3, r3
 800094a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094e:	b25b      	sxtb	r3, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f82a 	bl	80009ac <SendCommand>
  for (int i=0; i<8; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e009      	b.n	8000972 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f82e 	bl	80009c8 <SendChar>
  for (int i=0; i<8; i++)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b07      	cmp	r3, #7
 8000976:	ddf2      	ble.n	800095e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800098a:	e006      	b.n	800099a <HD44780_PrintStr+0x18>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f817 	bl	80009c8 <SendChar>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1f4      	bne.n	800098c <HD44780_PrintStr+0xa>
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f812 	bl	80009e4 <Send>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2101      	movs	r1, #1
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f804 	bl	80009e4 <Send>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f023 030f 	bic.w	r3, r3, #15
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000a02:	7bfa      	ldrb	r2, [r7, #15]
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f80b 	bl	8000a26 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000a10:	7bba      	ldrb	r2, [r7, #14]
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f804 	bl	8000a26 <Write4Bits>
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f808 	bl	8000a48 <ExpanderWrite>
  PulseEnable(value);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f820 	bl	8000a80 <PulseEnable>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <ExpanderWrite+0x30>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000a5e:	f107 020f 	add.w	r2, r7, #15
 8000a62:	230a      	movs	r3, #10
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	214e      	movs	r1, #78	; 0x4e
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <ExpanderWrite+0x34>)
 8000a6c:	f001 fe40 	bl	80026f0 <HAL_I2C_Master_Transmit>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	200000f0 	.word	0x200000f0

08000a80 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffd8 	bl	8000a48 <ExpanderWrite>
  DelayUS(20);
 8000a98:	2014      	movs	r0, #20
 8000a9a:	f000 f837 	bl	8000b0c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f023 0304 	bic.w	r3, r3, #4
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffce 	bl	8000a48 <ExpanderWrite>
  DelayUS(20);
 8000aac:	2014      	movs	r0, #20
 8000aae:	f000 f82d 	bl	8000b0c <DelayUS>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <DelayInit>:

static void DelayInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <DelayInit+0x48>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <DelayInit+0x48>)
 8000ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <DelayInit+0x48>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <DelayInit+0x48>)
 8000ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ad6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <DelayInit+0x4c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <DelayInit+0x4c>)
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <DelayInit+0x4c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <DelayInit+0x4c>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <DelayInit+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000af6:	bf00      	nop
  __ASM volatile ("NOP");
 8000af8:	bf00      	nop
  __ASM volatile ("NOP");
 8000afa:	bf00      	nop
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	e000edf0 	.word	0xe000edf0
 8000b08:	e0001000 	.word	0xe0001000

08000b0c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <DelayUS+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <DelayUS+0x44>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9a      	lsrs	r2, r3, #18
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <DelayUS+0x48>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <DelayUS+0x48>)
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f6      	bhi.n	8000b2e <DelayUS+0x22>
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	e0001000 	.word	0xe0001000

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0b4      	sub	sp, #208	; 0xd0
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f000 fca9 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f8a1 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 f9c9 	bl	8000efc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b6a:	f000 f99d 	bl	8000ea8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b6e:	f000 f8f1 	bl	8000d54 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b72:	f000 f92d 	bl	8000dd0 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000b76:	f000 f969 	bl	8000e4c <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000b7a:	4845      	ldr	r0, [pc, #276]	; (8000c90 <main+0x138>)
 8000b7c:	f000 fdf8 	bl	8001770 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 8000b80:	4844      	ldr	r0, [pc, #272]	; (8000c94 <main+0x13c>)
 8000b82:	f000 fdf5 	bl	8001770 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 8000b86:	2114      	movs	r1, #20
 8000b88:	4841      	ldr	r0, [pc, #260]	; (8000c90 <main+0x138>)
 8000b8a:	f000 fecb 	bl	8001924 <HAL_ADC_PollForConversion>
	  HAL_ADC_PollForConversion(&hadc2, 100);
 8000b8e:	2164      	movs	r1, #100	; 0x64
 8000b90:	4840      	ldr	r0, [pc, #256]	; (8000c94 <main+0x13c>)
 8000b92:	f000 fec7 	bl	8001924 <HAL_ADC_PollForConversion>
	  ADC_Val = HAL_ADC_GetValue(&hadc2);
 8000b96:	483f      	ldr	r0, [pc, #252]	; (8000c94 <main+0x13c>)
 8000b98:	f000 ffca 	bl	8001b30 <HAL_ADC_GetValue>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	  HAL_ADC_Stop(&hadc1);
 8000ba2:	483b      	ldr	r0, [pc, #236]	; (8000c90 <main+0x138>)
 8000ba4:	f000 fe92 	bl	80018cc <HAL_ADC_Stop>
	  lux = HAL_ADC_GetValue(&hadc1);
 8000ba8:	4839      	ldr	r0, [pc, #228]	; (8000c90 <main+0x138>)
 8000baa:	f000 ffc1 	bl	8001b30 <HAL_ADC_GetValue>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <main+0x140>)
 8000bb4:	801a      	strh	r2, [r3, #0]
	  sprintf(msg, "The Light: %hu", lux);
 8000bb6:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <main+0x140>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4937      	ldr	r1, [pc, #220]	; (8000c9c <main+0x144>)
 8000bbe:	4838      	ldr	r0, [pc, #224]	; (8000ca0 <main+0x148>)
 8000bc0:	f003 f86e 	bl	8003ca0 <siprintf>

	  flash_Countering(lux);
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <main+0x140>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fa7f 	bl	80010cc <flash_Countering>


	  /*START of LCD*/
	  HD44780_Init(2);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f7ff fdcc 	bl	800076c <HD44780_Init>
	  HD44780_Clear();
 8000bd4:	f7ff fe4e 	bl	8000874 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fe60 	bl	80008a0 <HD44780_SetCursor>
	  HD44780_PrintStr(msg);
 8000be0:	482f      	ldr	r0, [pc, #188]	; (8000ca0 <main+0x148>)
 8000be2:	f7ff fece 	bl	8000982 <HD44780_PrintStr>
	  HD44780_SetCursor(10,1);
 8000be6:	2101      	movs	r1, #1
 8000be8:	200a      	movs	r0, #10
 8000bea:	f7ff fe59 	bl	80008a0 <HD44780_SetCursor>



	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000bee:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <main+0x148>)
 8000bf0:	f7ff faae 	bl	8000150 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	4928      	ldr	r1, [pc, #160]	; (8000ca0 <main+0x148>)
 8000bfe:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <main+0x14c>)
 8000c00:	f002 fe9a 	bl	8003938 <HAL_UART_Transmit>
	  HAL_Delay(1500);
 8000c04:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c08:	f000 fcb6 	bl	8001578 <HAL_Delay>

	  char temperatureOutputCelcius[100];
	  char temperatureOutputFahrenheit[100];
	  coversion_to_Celicius(ADC_Val, temperatureOutputCelcius, sizeof(temperatureOutputCelcius));
 8000c0c:	1d39      	adds	r1, r7, #4
 8000c0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000c12:	2264      	movs	r2, #100	; 0x64
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 fa2f 	bl	8001078 <coversion_to_Celicius>
	  temp_conv_Fahrenheit(ADC_Val, temperatureOutputFahrenheit, sizeof(temperatureOutputFahrenheit));
 8000c1a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000c1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000c22:	2264      	movs	r2, #100	; 0x64
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f9ef 	bl	8001008 <temp_conv_Fahrenheit>

	  HAL_UART_Transmit(&huart2, temperatureOutputCelcius, strlen(temperatureOutputCelcius), HAL_MAX_DELAY);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fa8f 	bl	8000150 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	1d39      	adds	r1, r7, #4
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <main+0x14c>)
 8000c3e:	f002 fe7b 	bl	8003938 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, temperatureOutputFahrenheit, strlen(temperatureOutputFahrenheit), HAL_MAX_DELAY);
 8000c42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fa82 	bl	8000150 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <main+0x14c>)
 8000c5a:	f002 fe6d 	bl	8003938 <HAL_UART_Transmit>

	  HD44780_Clear();
 8000c5e:	f7ff fe09 	bl	8000874 <HD44780_Clear>
	  HD44780_SetCursor(0, 0);
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fe1b 	bl	80008a0 <HD44780_SetCursor>
	  HD44780_PrintStr(temperatureOutputCelcius);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fe88 	bl	8000982 <HD44780_PrintStr>

	  HD44780_SetCursor(0, 1);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fe13 	bl	80008a0 <HD44780_SetCursor>
	  HD44780_PrintStr(temperatureOutputFahrenheit);
 8000c7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe7f 	bl	8000982 <HD44780_PrintStr>
	  HAL_Delay(1500);
 8000c84:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000c88:	f000 fc76 	bl	8001578 <HAL_Delay>
  {
 8000c8c:	e775      	b.n	8000b7a <main+0x22>
 8000c8e:	bf00      	nop
 8000c90:	20000090 	.word	0x20000090
 8000c94:	200000c0 	.word	0x200000c0
 8000c98:	2000018c 	.word	0x2000018c
 8000c9c:	0800462c 	.word	0x0800462c
 8000ca0:	20000190 	.word	0x20000190
 8000ca4:	20000144 	.word	0x20000144

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	2228      	movs	r2, #40	; 0x28
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f812 	bl	8003ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000cec:	2300      	movs	r3, #0
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 f853 	bl	8002da0 <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d00:	f000 fa1a 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 fabf 	bl	80032a4 <HAL_RCC_ClockConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d2c:	f000 fa04 	bl	8001138 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d30:	2302      	movs	r3, #2
 8000d32:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fc40 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d46:	f000 f9f7 	bl	8001138 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	; 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000d66:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <MX_ADC1_Init+0x78>)
 8000d68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000d7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000d92:	f000 fc15 	bl	80015c0 <HAL_ADC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d9c:	f000 f9cc 	bl	8001138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000da8:	2302      	movs	r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_ADC1_Init+0x74>)
 8000db2:	f000 fec9 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000dbc:	f000 f9bc 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000090 	.word	0x20000090
 8000dcc:	40012400 	.word	0x40012400

08000dd0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000de2:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <MX_ADC2_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000dfa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dfe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000e0e:	f000 fbd7 	bl	80015c0 <HAL_ADC_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000e18:	f000 f98e 	bl	8001138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000e24:	2302      	movs	r3, #2
 8000e26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_ADC2_Init+0x74>)
 8000e2e:	f000 fe8b 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000e38:	f000 f97e 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000c0 	.word	0x200000c0
 8000e48:	40012800 	.word	0x40012800

08000e4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <MX_I2C1_Init+0x54>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_I2C1_Init+0x58>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e8a:	f001 faed 	bl	8002468 <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e94:	f000 f950 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200000f0 	.word	0x200000f0
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	000186a0 	.word	0x000186a0

08000ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART2_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f002 fcda 	bl	8003898 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 f925 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000144 	.word	0x20000144
 8000ef8:	40004400 	.word	0x40004400

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a2c      	ldr	r2, [pc, #176]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <MX_GPIO_Init+0xcc>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2120      	movs	r1, #32
 8000f74:	4815      	ldr	r0, [pc, #84]	; (8000fcc <MX_GPIO_Init+0xd0>)
 8000f76:	f001 fa24 	bl	80023c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_GPIO_Init+0xd4>)
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <MX_GPIO_Init+0xd8>)
 8000f90:	f001 f87c 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f94:	2320      	movs	r3, #32
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <MX_GPIO_Init+0xd0>)
 8000fac:	f001 f86e 	bl	800208c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2028      	movs	r0, #40	; 0x28
 8000fb6:	f001 f832 	bl	800201e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fba:	2028      	movs	r0, #40	; 0x28
 8000fbc:	f001 f84b 	bl	8002056 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	10110000 	.word	0x10110000
 8000fd4:	40011000 	.word	0x40011000

08000fd8 <celsius_to_fahrenheit.0>:
void temp_conv_Fahrenheit(uint16_t temp_var, char* outputBuffer, size_t bufferSize) {
    uint32_t var1_Celsius = 0;
    uint32_t var1_Fahrenheit = 0;

    // Nested function for Celsius to Fahrenheit conversion
    uint32_t celsius_to_fahrenheit(uint32_t celsius) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	f8c7 c000 	str.w	ip, [r7]
        return ((celsius * 9) / 5) + 32;
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <celsius_to_fahrenheit.0+0x28>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3320      	adds	r3, #32
    }
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	cccccccd 	.word	0xcccccccd
 8001004:	00000000 	.word	0x00000000

08001008 <temp_conv_Fahrenheit>:
void temp_conv_Fahrenheit(uint16_t temp_var, char* outputBuffer, size_t bufferSize) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	81fb      	strh	r3, [r7, #14]
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	617b      	str	r3, [r7, #20]
    uint32_t var1_Celsius = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    uint32_t var1_Fahrenheit = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]

    // Convert temperature to Celsius
    var1_Celsius = (temp_var * 0.05);
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fb16 	bl	8000658 <__aeabi_i2d>
 800102c:	a30e      	add	r3, pc, #56	; (adr r3, 8001068 <temp_conv_Fahrenheit+0x60>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff f895 	bl	8000160 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fb75 	bl	800072c <__aeabi_d2uiz>
 8001042:	4603      	mov	r3, r0
 8001044:	61fb      	str	r3, [r7, #28]

    // Convert Celsius to Fahrenheit using the nested function
    var1_Fahrenheit = celsius_to_fahrenheit(var1_Celsius);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	469c      	mov	ip, r3
 800104c:	69f8      	ldr	r0, [r7, #28]
 800104e:	f7ff ffc3 	bl	8000fd8 <celsius_to_fahrenheit.0>
 8001052:	61b8      	str	r0, [r7, #24]

    // Format the temperature statements into a single string
    snprintf(outputBuffer, bufferSize, "°F: %lu F", var1_Fahrenheit);
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <temp_conv_Fahrenheit+0x68>)
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	68b8      	ldr	r0, [r7, #8]
 800105c:	f002 fdec 	bl	8003c38 <sniprintf>
}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	9999999a 	.word	0x9999999a
 800106c:	3fa99999 	.word	0x3fa99999
 8001070:	0800463c 	.word	0x0800463c
 8001074:	00000000 	.word	0x00000000

08001078 <coversion_to_Celicius>:


void coversion_to_Celicius(uint16_t temp_var, char* outputBuffer, size_t bufferSize) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	81fb      	strh	r3, [r7, #14]
    uint32_t var1_Celsius = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]

    // Convert temperature to Celsius
    var1_Celsius = (temp_var * 0.05);
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fae3 	bl	8000658 <__aeabi_i2d>
 8001092:	a30b      	add	r3, pc, #44	; (adr r3, 80010c0 <coversion_to_Celicius+0x48>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff f862 	bl	8000160 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fb42 	bl	800072c <__aeabi_d2uiz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	617b      	str	r3, [r7, #20]

    // Format the temperature statement into a single string
    snprintf(outputBuffer, bufferSize, "°C: %lu C", var1_Celsius);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <coversion_to_Celicius+0x50>)
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	68b8      	ldr	r0, [r7, #8]
 80010b4:	f002 fdc0 	bl	8003c38 <sniprintf>
}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	9999999a 	.word	0x9999999a
 80010c4:	3fa99999 	.word	0x3fa99999
 80010c8:	08004648 	.word	0x08004648

080010cc <flash_Countering>:



void flash_Countering(int lux) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

    static int count = 0;

    switch (lux > 900) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80010da:	bfcc      	ite	gt
 80010dc:	2301      	movgt	r3, #1
 80010de:	2300      	movle	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d007      	beq.n	80010f6 <flash_Countering+0x2a>
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d11e      	bne.n	8001128 <flash_Countering+0x5c>
        case 1:
            count++;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <flash_Countering+0x64>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <flash_Countering+0x64>)
 80010f2:	6013      	str	r3, [r2, #0]
            break;
 80010f4:	e018      	b.n	8001128 <flash_Countering+0x5c>
        case 0:
            if (count >= 5) {
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <flash_Countering+0x64>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	dd13      	ble.n	8001126 <flash_Countering+0x5a>
                count = 0;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <flash_Countering+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
                if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001104:	2120      	movs	r1, #32
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <flash_Countering+0x68>)
 8001108:	f001 f944 	bl	8002394 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	d105      	bne.n	800111e <flash_Countering+0x52>

                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <flash_Countering+0x68>)
 8001118:	f001 f953 	bl	80023c2 <HAL_GPIO_WritePin>
                } else {

                    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
                }
            }
            break;
 800111c:	e003      	b.n	8001126 <flash_Countering+0x5a>
                    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800111e:	2120      	movs	r1, #32
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <flash_Countering+0x68>)
 8001122:	f001 f966 	bl	80023f2 <HAL_GPIO_TogglePin>
            break;
 8001126:	bf00      	nop
    }
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001a4 	.word	0x200001a4
 8001134:	40010800 	.word	0x40010800

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_MspInit+0x5c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_MspInit+0x5c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x5c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x5c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_MspInit+0x60>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_MspInit+0x60>)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000

080011a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a28      	ldr	r2, [pc, #160]	; (8001264 <HAL_ADC_MspInit+0xbc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d122      	bne.n	800120e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a20      	ldr	r2, [pc, #128]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fc:	2303      	movs	r3, #3
 80011fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4619      	mov	r1, r3
 8001206:	4819      	ldr	r0, [pc, #100]	; (800126c <HAL_ADC_MspInit+0xc4>)
 8001208:	f000 ff40 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800120c:	e026      	b.n	800125c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_ADC_MspInit+0xc8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d121      	bne.n	800125c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_ADC_MspInit+0xc0>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124c:	2303      	movs	r3, #3
 800124e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4619      	mov	r1, r3
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_ADC_MspInit+0xc4>)
 8001258:	f000 ff18 	bl	800208c <HAL_GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40012400 	.word	0x40012400
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800
 8001270:	40012800 	.word	0x40012800

08001274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_I2C_MspInit+0x90>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d132      	bne.n	80012fa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_I2C_MspInit+0x94>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <HAL_I2C_MspInit+0x94>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_I2C_MspInit+0x94>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b2:	2312      	movs	r3, #18
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4812      	ldr	r0, [pc, #72]	; (800130c <HAL_I2C_MspInit+0x98>)
 80012c2:	f000 fee3 	bl	800208c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_I2C_MspInit+0x9c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_I2C_MspInit+0x9c>)
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_I2C_MspInit+0x94>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_I2C_MspInit+0x94>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_I2C_MspInit+0x94>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40005400 	.word	0x40005400
 8001308:	40021000 	.word	0x40021000
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <HAL_UART_MspInit+0x70>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d123      	bne.n	800137c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_UART_MspInit+0x74>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <HAL_UART_MspInit+0x74>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	61d3      	str	r3, [r2, #28]
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_UART_MspInit+0x74>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_UART_MspInit+0x74>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_UART_MspInit+0x74>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_UART_MspInit+0x74>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001364:	230c      	movs	r3, #12
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_UART_MspInit+0x78>)
 8001378:	f000 fe88 	bl	800208c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40004400 	.word	0x40004400
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d6:	f000 f8b3 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}

080013de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013e2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e6:	f001 f81d 	bl	8002424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f002 fc66 	bl	8003cf0 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <_sbrk+0x64>)
 8001440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20005000 	.word	0x20005000
 8001450:	00000400 	.word	0x00000400
 8001454:	200001a8 	.word	0x200001a8
 8001458:	200002f8 	.word	0x200002f8

0800145c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff fff8 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800146e:	490c      	ldr	r1, [pc, #48]	; (80014a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001470:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001484:	4c09      	ldr	r4, [pc, #36]	; (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f002 fc33 	bl	8003cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001496:	f7ff fb5f 	bl	8000b58 <main>
  bx lr
 800149a:	4770      	bx	lr
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80014a4:	080046d0 	.word	0x080046d0
  ldr r2, =_sbss
 80014a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80014ac:	200002f8 	.word	0x200002f8

080014b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_2_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_Init+0x28>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_Init+0x28>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 fd9f 	bl	8002008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f808 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d0:	f7ff fe38 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40022000 	.word	0x40022000

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x54>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x58>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fdb7 	bl	8002072 <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f000 fd7f 	bl	800201e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <HAL_InitTick+0x5c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000010 	.word	0x20000010
 8001538:	20000018 	.word	0x20000018
 800153c:	20000014 	.word	0x20000014

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a03      	ldr	r2, [pc, #12]	; (8001560 <HAL_IncTick+0x20>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000018 	.word	0x20000018
 8001560:	200001ac 	.word	0x200001ac

08001564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_GetTick+0x10>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	200001ac 	.word	0x200001ac

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff fff0 	bl	8001564 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffe0 	bl	8001564 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000018 	.word	0x20000018

080015c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0be      	b.n	8001760 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d109      	bne.n	8001604 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fdd2 	bl	80011a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fbf1 	bl	8001dec <ADC_ConversionStop_Disable>
 800160a:	4603      	mov	r3, r0
 800160c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 8099 	bne.w	800174e <HAL_ADC_Init+0x18e>
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8095 	bne.w	800174e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800162c:	f023 0302 	bic.w	r3, r3, #2
 8001630:	f043 0202 	orr.w	r2, r3, #2
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001640:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7b1b      	ldrb	r3, [r3, #12]
 8001646:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001648:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4313      	orrs	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001658:	d003      	beq.n	8001662 <HAL_ADC_Init+0xa2>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d102      	bne.n	8001668 <HAL_ADC_Init+0xa8>
 8001662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001666:	e000      	b.n	800166a <HAL_ADC_Init+0xaa>
 8001668:	2300      	movs	r3, #0
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7d1b      	ldrb	r3, [r3, #20]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d119      	bne.n	80016ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7b1b      	ldrb	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	3b01      	subs	r3, #1
 8001686:	035a      	lsls	r2, r3, #13
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	e00b      	b.n	80016ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_ADC_Init+0x1a8>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016dc:	d003      	beq.n	80016e6 <HAL_ADC_Init+0x126>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d104      	bne.n	80016f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	051b      	lsls	r3, r3, #20
 80016ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	430a      	orrs	r2, r1
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_ADC_Init+0x1ac>)
 800170c:	4013      	ands	r3, r2
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	429a      	cmp	r2, r3
 8001712:	d10b      	bne.n	800172c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	f023 0303 	bic.w	r3, r3, #3
 8001722:	f043 0201 	orr.w	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800172a:	e018      	b.n	800175e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	f023 0312 	bic.w	r3, r3, #18
 8001734:	f043 0210 	orr.w	r2, r3, #16
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800174c:	e007      	b.n	800175e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	f043 0210 	orr.w	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	ffe1f7fd 	.word	0xffe1f7fd
 800176c:	ff1f0efe 	.word	0xff1f0efe

08001770 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_ADC_Start+0x1a>
 8001786:	2302      	movs	r3, #2
 8001788:	e098      	b.n	80018bc <HAL_ADC_Start+0x14c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fad0 	bl	8001d38 <ADC_Enable>
 8001798:	4603      	mov	r3, r0
 800179a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 8087 	bne.w	80018b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a41      	ldr	r2, [pc, #260]	; (80018c4 <HAL_ADC_Start+0x154>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d105      	bne.n	80017ce <HAL_ADC_Start+0x5e>
 80017c2:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <HAL_ADC_Start+0x158>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d115      	bne.n	80017fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d026      	beq.n	8001836 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017f8:	e01d      	b.n	8001836 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <HAL_ADC_Start+0x158>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d004      	beq.n	800181a <HAL_ADC_Start+0xaa>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <HAL_ADC_Start+0x154>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10d      	bne.n	8001836 <HAL_ADC_Start+0xc6>
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_ADC_Start+0x158>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800182e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	f023 0206 	bic.w	r2, r3, #6
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	62da      	str	r2, [r3, #44]	; 0x2c
 800184e:	e002      	b.n	8001856 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f06f 0202 	mvn.w	r2, #2
 8001866:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001872:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001876:	d113      	bne.n	80018a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <HAL_ADC_Start+0x154>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d105      	bne.n	800188e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_ADC_Start+0x158>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800188a:	2b00      	cmp	r3, #0
 800188c:	d108      	bne.n	80018a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	e00c      	b.n	80018ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	e003      	b.n	80018ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40012800 	.word	0x40012800
 80018c8:	40012400 	.word	0x40012400

080018cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_Stop+0x1a>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e01a      	b.n	800191c <HAL_ADC_Stop+0x50>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fa7c 	bl	8001dec <ADC_ConversionStop_Disable>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f043 0201 	orr.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800193a:	f7ff fe13 	bl	8001564 <HAL_GetTick>
 800193e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	f043 0220 	orr.w	r2, r3, #32
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0d3      	b.n	8001b0e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d131      	bne.n	80019d8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800197e:	2b00      	cmp	r3, #0
 8001980:	d12a      	bne.n	80019d8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001982:	e021      	b.n	80019c8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198a:	d01d      	beq.n	80019c8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_ADC_PollForConversion+0x7e>
 8001992:	f7ff fde7 	bl	8001564 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d212      	bcs.n	80019c8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10b      	bne.n	80019c8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	f043 0204 	orr.w	r2, r3, #4
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0a2      	b.n	8001b0e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0d6      	beq.n	8001984 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019d6:	e070      	b.n	8001aba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <HAL_ADC_PollForConversion+0x1f4>)
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	2002      	movs	r0, #2
 80019de:	f001 fea5 	bl	800372c <HAL_RCCEx_GetPeriphCLKFreq>
 80019e2:	4603      	mov	r3, r0
 80019e4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6919      	ldr	r1, [r3, #16]
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <HAL_ADC_PollForConversion+0x1f8>)
 80019f0:	400b      	ands	r3, r1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_ADC_PollForConversion+0x104>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68d9      	ldr	r1, [r3, #12]
 80019fc:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <HAL_ADC_PollForConversion+0x1fc>)
 80019fe:	400b      	ands	r3, r1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d111      	bne.n	8001a28 <HAL_ADC_PollForConversion+0x104>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6919      	ldr	r1, [r3, #16]
 8001a0a:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <HAL_ADC_PollForConversion+0x200>)
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d108      	bne.n	8001a24 <HAL_ADC_PollForConversion+0x100>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68d9      	ldr	r1, [r3, #12]
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <HAL_ADC_PollForConversion+0x204>)
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_PollForConversion+0x100>
 8001a20:	2314      	movs	r3, #20
 8001a22:	e020      	b.n	8001a66 <HAL_ADC_PollForConversion+0x142>
 8001a24:	2329      	movs	r3, #41	; 0x29
 8001a26:	e01e      	b.n	8001a66 <HAL_ADC_PollForConversion+0x142>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6919      	ldr	r1, [r3, #16]
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_ADC_PollForConversion+0x200>)
 8001a30:	400b      	ands	r3, r1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x120>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68d9      	ldr	r1, [r3, #12]
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_ADC_PollForConversion+0x204>)
 8001a3e:	400b      	ands	r3, r1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00d      	beq.n	8001a60 <HAL_ADC_PollForConversion+0x13c>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_ADC_PollForConversion+0x208>)
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d108      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x140>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68d9      	ldr	r1, [r3, #12]
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_ADC_PollForConversion+0x208>)
 8001a5a:	400b      	ands	r3, r1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x140>
 8001a60:	2354      	movs	r3, #84	; 0x54
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_PollForConversion+0x142>
 8001a64:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a6c:	e021      	b.n	8001ab2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d01a      	beq.n	8001aac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <HAL_ADC_PollForConversion+0x168>
 8001a7c:	f7ff fd72 	bl	8001564 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d20f      	bcs.n	8001aac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d90b      	bls.n	8001aac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	f043 0204 	orr.w	r2, r3, #4
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e030      	b.n	8001b0e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d8d9      	bhi.n	8001a6e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f06f 0212 	mvn.w	r2, #18
 8001ac2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ada:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ade:	d115      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d111      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f043 0201 	orr.w	r2, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000010 	.word	0x20000010
 8001b1c:	24924924 	.word	0x24924924
 8001b20:	00924924 	.word	0x00924924
 8001b24:	12492492 	.word	0x12492492
 8001b28:	00492492 	.word	0x00492492
 8001b2c:	00249249 	.word	0x00249249

08001b30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x20>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e0dc      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x1da>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d81c      	bhi.n	8001bb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	3b05      	subs	r3, #5
 8001b8a:	221f      	movs	r2, #31
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4019      	ands	r1, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b05      	subs	r3, #5
 8001ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb0:	e03c      	b.n	8001c2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d81c      	bhi.n	8001bf4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b23      	subs	r3, #35	; 0x23
 8001bcc:	221f      	movs	r2, #31
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4019      	ands	r1, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b23      	subs	r3, #35	; 0x23
 8001be6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf2:	e01b      	b.n	8001c2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b41      	subs	r3, #65	; 0x41
 8001c06:	221f      	movs	r2, #31
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4019      	ands	r1, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b41      	subs	r3, #65	; 0x41
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d91c      	bls.n	8001c6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68d9      	ldr	r1, [r3, #12]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	3b1e      	subs	r3, #30
 8001c46:	2207      	movs	r2, #7
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6898      	ldr	r0, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b1e      	subs	r3, #30
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	e019      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6919      	ldr	r1, [r3, #16]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2207      	movs	r2, #7
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4019      	ands	r1, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6898      	ldr	r0, [r3, #8]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d003      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cae:	2b11      	cmp	r3, #17
 8001cb0:	d132      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_ADC_ConfigChannel+0x1e4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d125      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d126      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cd8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d11a      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9a      	lsrs	r2, r3, #18
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf8:	e002      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f9      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x1b2>
 8001d06:	e007      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	40012400 	.word	0x40012400
 8001d30:	20000010 	.word	0x20000010
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d040      	beq.n	8001dd8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <ADC_Enable+0xac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <ADC_Enable+0xb0>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d74:	e002      	b.n	8001d7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d82:	f7ff fbef 	bl	8001564 <HAL_GetTick>
 8001d86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d88:	e01f      	b.n	8001dca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d8a:	f7ff fbeb 	bl	8001564 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d918      	bls.n	8001dca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d011      	beq.n	8001dca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e007      	b.n	8001dda <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d1d8      	bne.n	8001d8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000010 	.word	0x20000010
 8001de8:	431bde83 	.word	0x431bde83

08001dec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d12e      	bne.n	8001e64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e16:	f7ff fba5 	bl	8001564 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e1c:	e01b      	b.n	8001e56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e1e:	f7ff fba1 	bl	8001564 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d914      	bls.n	8001e56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10d      	bne.n	8001e56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e007      	b.n	8001e66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d0dc      	beq.n	8001e1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0b      	blt.n	8001efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4906      	ldr	r1, [pc, #24]	; (8001f08 <__NVIC_EnableIRQ+0x34>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd4:	d301      	bcc.n	8001fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00f      	b.n	8001ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <SysTick_Config+0x40>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe2:	210f      	movs	r1, #15
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f7ff ff90 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <SysTick_Config+0x40>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <SysTick_Config+0x40>)
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	e000e010 	.word	0xe000e010

08002008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff2d 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002030:	f7ff ff42 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 8002034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	6978      	ldr	r0, [r7, #20]
 800203c:	f7ff ff90 	bl	8001f60 <NVIC_EncodePriority>
 8002040:	4602      	mov	r2, r0
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff5f 	bl	8001f0c <__NVIC_SetPriority>
}
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff35 	bl	8001ed4 <__NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffa2 	bl	8001fc4 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b08b      	sub	sp, #44	; 0x2c
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	e169      	b.n	8002374 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020a0:	2201      	movs	r2, #1
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 8158 	bne.w	800236e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4a9a      	ldr	r2, [pc, #616]	; (800232c <HAL_GPIO_Init+0x2a0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d05e      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020c8:	4a98      	ldr	r2, [pc, #608]	; (800232c <HAL_GPIO_Init+0x2a0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d875      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020ce:	4a98      	ldr	r2, [pc, #608]	; (8002330 <HAL_GPIO_Init+0x2a4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d058      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020d4:	4a96      	ldr	r2, [pc, #600]	; (8002330 <HAL_GPIO_Init+0x2a4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d86f      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020da:	4a96      	ldr	r2, [pc, #600]	; (8002334 <HAL_GPIO_Init+0x2a8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d052      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020e0:	4a94      	ldr	r2, [pc, #592]	; (8002334 <HAL_GPIO_Init+0x2a8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d869      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020e6:	4a94      	ldr	r2, [pc, #592]	; (8002338 <HAL_GPIO_Init+0x2ac>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04c      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020ec:	4a92      	ldr	r2, [pc, #584]	; (8002338 <HAL_GPIO_Init+0x2ac>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d863      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020f2:	4a92      	ldr	r2, [pc, #584]	; (800233c <HAL_GPIO_Init+0x2b0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d046      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020f8:	4a90      	ldr	r2, [pc, #576]	; (800233c <HAL_GPIO_Init+0x2b0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d85d      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d82a      	bhi.n	8002158 <HAL_GPIO_Init+0xcc>
 8002102:	2b12      	cmp	r3, #18
 8002104:	d859      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 8002106:	a201      	add	r2, pc, #4	; (adr r2, 800210c <HAL_GPIO_Init+0x80>)
 8002108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210c:	08002187 	.word	0x08002187
 8002110:	08002161 	.word	0x08002161
 8002114:	08002173 	.word	0x08002173
 8002118:	080021b5 	.word	0x080021b5
 800211c:	080021bb 	.word	0x080021bb
 8002120:	080021bb 	.word	0x080021bb
 8002124:	080021bb 	.word	0x080021bb
 8002128:	080021bb 	.word	0x080021bb
 800212c:	080021bb 	.word	0x080021bb
 8002130:	080021bb 	.word	0x080021bb
 8002134:	080021bb 	.word	0x080021bb
 8002138:	080021bb 	.word	0x080021bb
 800213c:	080021bb 	.word	0x080021bb
 8002140:	080021bb 	.word	0x080021bb
 8002144:	080021bb 	.word	0x080021bb
 8002148:	080021bb 	.word	0x080021bb
 800214c:	080021bb 	.word	0x080021bb
 8002150:	08002169 	.word	0x08002169
 8002154:	0800217d 	.word	0x0800217d
 8002158:	4a79      	ldr	r2, [pc, #484]	; (8002340 <HAL_GPIO_Init+0x2b4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800215e:	e02c      	b.n	80021ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	623b      	str	r3, [r7, #32]
          break;
 8002166:	e029      	b.n	80021bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	3304      	adds	r3, #4
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e024      	b.n	80021bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	3308      	adds	r3, #8
 8002178:	623b      	str	r3, [r7, #32]
          break;
 800217a:	e01f      	b.n	80021bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	330c      	adds	r3, #12
 8002182:	623b      	str	r3, [r7, #32]
          break;
 8002184:	e01a      	b.n	80021bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800218e:	2304      	movs	r3, #4
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e013      	b.n	80021bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800219c:	2308      	movs	r3, #8
 800219e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	611a      	str	r2, [r3, #16]
          break;
 80021a6:	e009      	b.n	80021bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a8:	2308      	movs	r3, #8
 80021aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	615a      	str	r2, [r3, #20]
          break;
 80021b2:	e003      	b.n	80021bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b4:	2300      	movs	r3, #0
 80021b6:	623b      	str	r3, [r7, #32]
          break;
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x130>
          break;
 80021ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2bff      	cmp	r3, #255	; 0xff
 80021c0:	d801      	bhi.n	80021c6 <HAL_GPIO_Init+0x13a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	e001      	b.n	80021ca <HAL_GPIO_Init+0x13e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d802      	bhi.n	80021d8 <HAL_GPIO_Init+0x14c>
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	e002      	b.n	80021de <HAL_GPIO_Init+0x152>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	3b08      	subs	r3, #8
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	210f      	movs	r1, #15
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	401a      	ands	r2, r3
 80021f0:	6a39      	ldr	r1, [r7, #32]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	431a      	orrs	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80b1 	beq.w	800236e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800220c:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002224:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_GPIO_Init+0x2bc>)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a40      	ldr	r2, [pc, #256]	; (800234c <HAL_GPIO_Init+0x2c0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <HAL_GPIO_Init+0x1ec>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_GPIO_Init+0x2c4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00d      	beq.n	8002274 <HAL_GPIO_Init+0x1e8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3e      	ldr	r2, [pc, #248]	; (8002354 <HAL_GPIO_Init+0x2c8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <HAL_GPIO_Init+0x1e4>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3d      	ldr	r2, [pc, #244]	; (8002358 <HAL_GPIO_Init+0x2cc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_GPIO_Init+0x1e0>
 8002268:	2303      	movs	r3, #3
 800226a:	e006      	b.n	800227a <HAL_GPIO_Init+0x1ee>
 800226c:	2304      	movs	r3, #4
 800226e:	e004      	b.n	800227a <HAL_GPIO_Init+0x1ee>
 8002270:	2302      	movs	r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x1ee>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_GPIO_Init+0x1ee>
 8002278:	2300      	movs	r3, #0
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	f002 0203 	and.w	r2, r2, #3
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	4093      	lsls	r3, r2
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800228a:	492f      	ldr	r1, [pc, #188]	; (8002348 <HAL_GPIO_Init+0x2bc>)
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	492c      	ldr	r1, [pc, #176]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4928      	ldr	r1, [pc, #160]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022bc:	4013      	ands	r3, r2
 80022be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	4922      	ldr	r1, [pc, #136]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	491e      	ldr	r1, [pc, #120]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4918      	ldr	r1, [pc, #96]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_GPIO_Init+0x2d0>)
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	43db      	mvns	r3, r3
 800230a:	4914      	ldr	r1, [pc, #80]	; (800235c <HAL_GPIO_Init+0x2d0>)
 800230c:	4013      	ands	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d021      	beq.n	8002360 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_GPIO_Init+0x2d0>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	490e      	ldr	r1, [pc, #56]	; (800235c <HAL_GPIO_Init+0x2d0>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e021      	b.n	800236e <HAL_GPIO_Init+0x2e2>
 800232a:	bf00      	nop
 800232c:	10320000 	.word	0x10320000
 8002330:	10310000 	.word	0x10310000
 8002334:	10220000 	.word	0x10220000
 8002338:	10210000 	.word	0x10210000
 800233c:	10120000 	.word	0x10120000
 8002340:	10110000 	.word	0x10110000
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	40010800 	.word	0x40010800
 8002350:	40010c00 	.word	0x40010c00
 8002354:	40011000 	.word	0x40011000
 8002358:	40011400 	.word	0x40011400
 800235c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_GPIO_Init+0x304>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	43db      	mvns	r3, r3
 8002368:	4909      	ldr	r1, [pc, #36]	; (8002390 <HAL_GPIO_Init+0x304>)
 800236a:	4013      	ands	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	f47f ae8e 	bne.w	80020a0 <HAL_GPIO_Init+0x14>
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	372c      	adds	r7, #44	; 0x2c
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e001      	b.n	80023b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	807b      	strh	r3, [r7, #2]
 80023ce:	4613      	mov	r3, r2
 80023d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d2:	787b      	ldrb	r3, [r7, #1]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d8:	887a      	ldrh	r2, [r7, #2]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023de:	e003      	b.n	80023e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	041a      	lsls	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	611a      	str	r2, [r3, #16]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002404:	887a      	ldrh	r2, [r7, #2]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	041a      	lsls	r2, r3, #16
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43d9      	mvns	r1, r3
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	400b      	ands	r3, r1
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f806 	bl	8002454 <HAL_GPIO_EXTI_Callback>
  }
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e12b      	b.n	80026d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fef0 	bl	8001274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024cc:	f001 f832 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 80024d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a81      	ldr	r2, [pc, #516]	; (80026dc <HAL_I2C_Init+0x274>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d807      	bhi.n	80024ec <HAL_I2C_Init+0x84>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a80      	ldr	r2, [pc, #512]	; (80026e0 <HAL_I2C_Init+0x278>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e006      	b.n	80024fa <HAL_I2C_Init+0x92>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a7d      	ldr	r2, [pc, #500]	; (80026e4 <HAL_I2C_Init+0x27c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	bf94      	ite	ls
 80024f4:	2301      	movls	r3, #1
 80024f6:	2300      	movhi	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0e7      	b.n	80026d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a78      	ldr	r2, [pc, #480]	; (80026e8 <HAL_I2C_Init+0x280>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0c9b      	lsrs	r3, r3, #18
 800250c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_I2C_Init+0x274>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d802      	bhi.n	800253c <HAL_I2C_Init+0xd4>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	3301      	adds	r3, #1
 800253a:	e009      	b.n	8002550 <HAL_I2C_Init+0xe8>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_I2C_Init+0x284>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	3301      	adds	r3, #1
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	495c      	ldr	r1, [pc, #368]	; (80026dc <HAL_I2C_Init+0x274>)
 800256c:	428b      	cmp	r3, r1
 800256e:	d819      	bhi.n	80025a4 <HAL_I2C_Init+0x13c>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e59      	subs	r1, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fbb1 f3f3 	udiv	r3, r1, r3
 800257e:	1c59      	adds	r1, r3, #1
 8002580:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002584:	400b      	ands	r3, r1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_I2C_Init+0x138>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e59      	subs	r1, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fbb1 f3f3 	udiv	r3, r1, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259e:	e051      	b.n	8002644 <HAL_I2C_Init+0x1dc>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e04f      	b.n	8002644 <HAL_I2C_Init+0x1dc>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d111      	bne.n	80025d0 <HAL_I2C_Init+0x168>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	440b      	add	r3, r1
 80025ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e012      	b.n	80025f6 <HAL_I2C_Init+0x18e>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1e58      	subs	r0, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	0099      	lsls	r1, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Init+0x196>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e022      	b.n	8002644 <HAL_I2C_Init+0x1dc>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10e      	bne.n	8002624 <HAL_I2C_Init+0x1bc>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1e58      	subs	r0, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	440b      	add	r3, r1
 8002614:	fbb0 f3f3 	udiv	r3, r0, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002622:	e00f      	b.n	8002644 <HAL_I2C_Init+0x1dc>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e58      	subs	r0, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	0099      	lsls	r1, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	6809      	ldr	r1, [r1, #0]
 8002648:	4313      	orrs	r3, r2
 800264a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6911      	ldr	r1, [r2, #16]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68d2      	ldr	r2, [r2, #12]
 800267e:	4311      	orrs	r1, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	430b      	orrs	r3, r1
 8002686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	000186a0 	.word	0x000186a0
 80026e0:	001e847f 	.word	0x001e847f
 80026e4:	003d08ff 	.word	0x003d08ff
 80026e8:	431bde83 	.word	0x431bde83
 80026ec:	10624dd3 	.word	0x10624dd3

080026f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	460b      	mov	r3, r1
 80026fe:	817b      	strh	r3, [r7, #10]
 8002700:	4613      	mov	r3, r2
 8002702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7fe ff2e 	bl	8001564 <HAL_GetTick>
 8002708:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b20      	cmp	r3, #32
 8002714:	f040 80e0 	bne.w	80028d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2319      	movs	r3, #25
 800271e:	2201      	movs	r2, #1
 8002720:	4970      	ldr	r1, [pc, #448]	; (80028e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f964 	bl	80029f0 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
 8002730:	e0d3      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_I2C_Master_Transmit+0x50>
 800273c:	2302      	movs	r3, #2
 800273e:	e0cc      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d007      	beq.n	8002766 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2221      	movs	r2, #33	; 0x21
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2210      	movs	r2, #16
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	893a      	ldrh	r2, [r7, #8]
 8002796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a50      	ldr	r2, [pc, #320]	; (80028e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f89c 	bl	80028ec <I2C_MasterRequestWrite>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e08d      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027d4:	e066      	b.n	80028a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	6a39      	ldr	r1, [r7, #32]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fa22 	bl	8002c24 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d107      	bne.n	80027fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06b      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b04      	cmp	r3, #4
 800283e:	d11b      	bne.n	8002878 <HAL_I2C_Master_Transmit+0x188>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d017      	beq.n	8002878 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	6a39      	ldr	r1, [r7, #32]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa19 	bl	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2b04      	cmp	r3, #4
 800288e:	d107      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e01a      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d194      	bne.n	80027d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e000      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	00100002 	.word	0x00100002
 80028e8:	ffff0000 	.word	0xffff0000

080028ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	460b      	mov	r3, r1
 80028fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d006      	beq.n	8002916 <I2C_MasterRequestWrite+0x2a>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d003      	beq.n	8002916 <I2C_MasterRequestWrite+0x2a>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002914:	d108      	bne.n	8002928 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e00b      	b.n	8002940 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	2b12      	cmp	r3, #18
 800292e:	d107      	bne.n	8002940 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800293e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f84f 	bl	80029f0 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00d      	beq.n	8002974 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002966:	d103      	bne.n	8002970 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e035      	b.n	80029e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800297c:	d108      	bne.n	8002990 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800298c:	611a      	str	r2, [r3, #16]
 800298e:	e01b      	b.n	80029c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002990:	897b      	ldrh	r3, [r7, #10]
 8002992:	11db      	asrs	r3, r3, #7
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 0306 	and.w	r3, r3, #6
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f063 030f 	orn	r3, r3, #15
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	490e      	ldr	r1, [pc, #56]	; (80029e8 <I2C_MasterRequestWrite+0xfc>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f898 	bl	8002ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e010      	b.n	80029e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <I2C_MasterRequestWrite+0x100>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f888 	bl	8002ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	00010008 	.word	0x00010008
 80029ec:	00010002 	.word	0x00010002

080029f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a00:	e048      	b.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d044      	beq.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0a:	f7fe fdab 	bl	8001564 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d302      	bcc.n	8002a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d139      	bne.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d10d      	bne.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	43da      	mvns	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	e00c      	b.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	43da      	mvns	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d116      	bne.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e023      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d10d      	bne.n	8002aba <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	e00c      	b.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d093      	beq.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002af2:	e071      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b02:	d123      	bne.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e067      	b.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d041      	beq.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b54:	f7fe fd06 	bl	8001564 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d302      	bcc.n	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d136      	bne.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d10c      	bne.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e00b      	b.n	8002ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e021      	b.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d10c      	bne.n	8002bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	43da      	mvns	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4013      	ands	r3, r2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e00b      	b.n	8002c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f47f af6d 	bne.w	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c30:	e034      	b.n	8002c9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f886 	bl	8002d44 <I2C_IsAcknowledgeFailed>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e034      	b.n	8002cac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d028      	beq.n	8002c9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe fc8b 	bl	8001564 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11d      	bne.n	8002c9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d016      	beq.n	8002c9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f043 0220 	orr.w	r2, r3, #32
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e007      	b.n	8002cac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b80      	cmp	r3, #128	; 0x80
 8002ca8:	d1c3      	bne.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cc0:	e034      	b.n	8002d2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f83e 	bl	8002d44 <I2C_IsAcknowledgeFailed>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e034      	b.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d028      	beq.n	8002d2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cda:	f7fe fc43 	bl	8001564 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d302      	bcc.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11d      	bne.n	8002d2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d016      	beq.n	8002d2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e007      	b.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d1c3      	bne.n	8002cc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5a:	d11b      	bne.n	8002d94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e272      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8087 	beq.w	8002ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dc0:	4b92      	ldr	r3, [pc, #584]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d00c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dcc:	4b8f      	ldr	r3, [pc, #572]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d112      	bne.n	8002dfe <HAL_RCC_OscConfig+0x5e>
 8002dd8:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d10b      	bne.n	8002dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de6:	4b89      	ldr	r3, [pc, #548]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d06c      	beq.n	8002ecc <HAL_RCC_OscConfig+0x12c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d168      	bne.n	8002ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e24c      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x76>
 8002e08:	4b80      	ldr	r3, [pc, #512]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a7f      	ldr	r2, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e02e      	b.n	8002e74 <HAL_RCC_OscConfig+0xd4>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x98>
 8002e1e:	4b7b      	ldr	r3, [pc, #492]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7a      	ldr	r2, [pc, #488]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b78      	ldr	r3, [pc, #480]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a77      	ldr	r2, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e01d      	b.n	8002e74 <HAL_RCC_OscConfig+0xd4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0xbc>
 8002e42:	4b72      	ldr	r3, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a71      	ldr	r2, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6e      	ldr	r2, [pc, #440]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0xd4>
 8002e5c:	4b6b      	ldr	r3, [pc, #428]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6a      	ldr	r2, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a67      	ldr	r2, [pc, #412]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fb72 	bl	8001564 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7fe fb6e 	bl	8001564 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e200      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b5d      	ldr	r3, [pc, #372]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0xe4>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fb5e 	bl	8001564 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe fb5a 	bl	8001564 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1ec      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x10c>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d063      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eda:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ee6:	4b49      	ldr	r3, [pc, #292]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d11c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x18c>
 8002ef2:	4b46      	ldr	r3, [pc, #280]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_RCC_OscConfig+0x176>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e1c0      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f16:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4939      	ldr	r1, [pc, #228]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2a:	e03a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d020      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fb13 	bl	8001564 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fe fb0f 	bl	8001564 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1a1      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4927      	ldr	r1, [pc, #156]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
 8002f74:	e015      	b.n	8002fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe faf2 	bl	8001564 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f84:	f7fe faee 	bl	8001564 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e180      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d03a      	beq.n	8003024 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d019      	beq.n	8002fea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fad2 	bl	8001564 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc4:	f7fe face 	bl	8001564 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e160      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f000 face 	bl	8003584 <RCC_Delay>
 8002fe8:	e01c      	b.n	8003024 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fab8 	bl	8001564 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff6:	e00f      	b.n	8003018 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fab4 	bl	8001564 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d908      	bls.n	8003018 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e146      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	42420000 	.word	0x42420000
 8003014:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	4b92      	ldr	r3, [pc, #584]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e9      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80a6 	beq.w	800317e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003036:	4b8b      	ldr	r3, [pc, #556]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4a87      	ldr	r2, [pc, #540]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304c:	61d3      	str	r3, [r2, #28]
 800304e:	4b85      	ldr	r3, [pc, #532]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b82      	ldr	r3, [pc, #520]	; (8003268 <HAL_RCC_OscConfig+0x4c8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b7f      	ldr	r3, [pc, #508]	; (8003268 <HAL_RCC_OscConfig+0x4c8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a7e      	ldr	r2, [pc, #504]	; (8003268 <HAL_RCC_OscConfig+0x4c8>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7fe fa75 	bl	8001564 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307e:	f7fe fa71 	bl	8001564 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b64      	cmp	r3, #100	; 0x64
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e103      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	4b75      	ldr	r3, [pc, #468]	; (8003268 <HAL_RCC_OscConfig+0x4c8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_OscConfig+0x312>
 80030a4:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4a6e      	ldr	r2, [pc, #440]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	e02d      	b.n	800310e <HAL_RCC_OscConfig+0x36e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x334>
 80030ba:	4b6a      	ldr	r3, [pc, #424]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	4a69      	ldr	r2, [pc, #420]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6213      	str	r3, [r2, #32]
 80030c6:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4a66      	ldr	r2, [pc, #408]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	6213      	str	r3, [r2, #32]
 80030d2:	e01c      	b.n	800310e <HAL_RCC_OscConfig+0x36e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x356>
 80030dc:	4b61      	ldr	r3, [pc, #388]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4a60      	ldr	r2, [pc, #384]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030e2:	f043 0304 	orr.w	r3, r3, #4
 80030e6:	6213      	str	r3, [r2, #32]
 80030e8:	4b5e      	ldr	r3, [pc, #376]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4a5d      	ldr	r2, [pc, #372]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	e00b      	b.n	800310e <HAL_RCC_OscConfig+0x36e>
 80030f6:	4b5b      	ldr	r3, [pc, #364]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a5a      	ldr	r2, [pc, #360]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	4b58      	ldr	r3, [pc, #352]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d015      	beq.n	8003142 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7fe fa25 	bl	8001564 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fe fa21 	bl	8001564 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e0b1      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ee      	beq.n	800311e <HAL_RCC_OscConfig+0x37e>
 8003140:	e014      	b.n	800316c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7fe fa0f 	bl	8001564 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fe fa0b 	bl	8001564 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	; 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e09b      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	4b40      	ldr	r3, [pc, #256]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ee      	bne.n	800314a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d105      	bne.n	800317e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003172:	4b3c      	ldr	r3, [pc, #240]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8087 	beq.w	8003296 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d061      	beq.n	8003258 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d146      	bne.n	800322a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <HAL_RCC_OscConfig+0x4cc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fe f9df 	bl	8001564 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fe f9db 	bl	8001564 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e06d      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031bc:	4b29      	ldr	r3, [pc, #164]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4921      	ldr	r1, [pc, #132]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e4:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a19      	ldr	r1, [r3, #32]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	430b      	orrs	r3, r1
 80031f6:	491b      	ldr	r1, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe f9af 	bl	8001564 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe f9ab 	bl	8001564 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e03d      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x46a>
 8003228:	e035      	b.n	8003296 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_RCC_OscConfig+0x4cc>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe f998 	bl	8001564 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe f994 	bl	8001564 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e026      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x498>
 8003256:	e01e      	b.n	8003296 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e019      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
 8003264:	40021000 	.word	0x40021000
 8003268:	40007000 	.word	0x40007000
 800326c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x500>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	429a      	cmp	r2, r3
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000

080032a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0d0      	b.n	800345a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d910      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b67      	ldr	r3, [pc, #412]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 0207 	bic.w	r2, r3, #7
 80032ce:	4965      	ldr	r1, [pc, #404]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0b8      	b.n	800345a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a58      	ldr	r2, [pc, #352]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800330a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a52      	ldr	r2, [pc, #328]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	494d      	ldr	r1, [pc, #308]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d040      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d115      	bne.n	8003382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e07f      	b.n	800345a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d107      	bne.n	8003372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e073      	b.n	800345a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003372:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06b      	b.n	800345a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f023 0203 	bic.w	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4936      	ldr	r1, [pc, #216]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003394:	f7fe f8e6 	bl	8001564 <HAL_GetTick>
 8003398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339c:	f7fe f8e2 	bl	8001564 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e053      	b.n	800345a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	4b2d      	ldr	r3, [pc, #180]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 020c 	and.w	r2, r3, #12
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d1eb      	bne.n	800339c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c4:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d210      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 0207 	bic.w	r2, r3, #7
 80033da:	4922      	ldr	r1, [pc, #136]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e032      	b.n	800345a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4916      	ldr	r1, [pc, #88]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	490e      	ldr	r1, [pc, #56]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003432:	f000 f821 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003436:	4602      	mov	r2, r0
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	490a      	ldr	r1, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003444:	5ccb      	ldrb	r3, [r1, r3]
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1cc>)
 800344c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1d0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe f844 	bl	80014e0 <HAL_InitTick>

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000
 8003468:	40021000 	.word	0x40021000
 800346c:	08004654 	.word	0x08004654
 8003470:	20000010 	.word	0x20000010
 8003474:	20000014 	.word	0x20000014

08003478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_RCC_GetSysClockFreq+0x94>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d002      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x30>
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x36>
 80034a6:	e027      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_RCC_GetSysClockFreq+0x98>)
 80034aa:	613b      	str	r3, [r7, #16]
      break;
 80034ac:	e027      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	0c9b      	lsrs	r3, r3, #18
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034b8:	5cd3      	ldrb	r3, [r2, r3]
 80034ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_GetSysClockFreq+0x94>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0c5b      	lsrs	r3, r3, #17
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	4a11      	ldr	r2, [pc, #68]	; (8003518 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a0d      	ldr	r2, [pc, #52]	; (8003510 <HAL_RCC_GetSysClockFreq+0x98>)
 80034da:	fb03 f202 	mul.w	r2, r3, r2
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e004      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a0c      	ldr	r2, [pc, #48]	; (800351c <HAL_RCC_GetSysClockFreq+0xa4>)
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	613b      	str	r3, [r7, #16]
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fa:	613b      	str	r3, [r7, #16]
      break;
 80034fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fe:	693b      	ldr	r3, [r7, #16]
}
 8003500:	4618      	mov	r0, r3
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	007a1200 	.word	0x007a1200
 8003514:	0800466c 	.word	0x0800466c
 8003518:	0800467c 	.word	0x0800467c
 800351c:	003d0900 	.word	0x003d0900

08003520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <HAL_RCC_GetHCLKFreq+0x10>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	20000010 	.word	0x20000010

08003534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003538:	f7ff fff2 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4903      	ldr	r1, [pc, #12]	; (8003558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	08004664 	.word	0x08004664

0800355c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003560:	f7ff ffde 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	0adb      	lsrs	r3, r3, #11
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	08004664 	.word	0x08004664

08003584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <RCC_Delay+0x34>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <RCC_Delay+0x38>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	0a5b      	lsrs	r3, r3, #9
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035a0:	bf00      	nop
  }
  while (Delay --);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1e5a      	subs	r2, r3, #1
 80035a6:	60fa      	str	r2, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f9      	bne.n	80035a0 <RCC_Delay+0x1c>
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	20000010 	.word	0x20000010
 80035bc:	10624dd3 	.word	0x10624dd3

080035c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d07d      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035dc:	2300      	movs	r3, #0
 80035de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e0:	4b4f      	ldr	r3, [pc, #316]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4a4b      	ldr	r2, [pc, #300]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	61d3      	str	r3, [r2, #28]
 80035f8:	4b49      	ldr	r3, [pc, #292]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003604:	2301      	movs	r3, #1
 8003606:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b46      	ldr	r3, [pc, #280]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d118      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a42      	ldr	r2, [pc, #264]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003620:	f7fd ffa0 	bl	8001564 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	e008      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7fd ff9c 	bl	8001564 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e06d      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363a:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003646:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d02e      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d027      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003664:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366e:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003674:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800367a:	4a29      	ldr	r2, [pc, #164]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d014      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fd ff6b 	bl	8001564 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003692:	f7fd ff67 	bl	8001564 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e036      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ee      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b4:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4917      	ldr	r1, [pc, #92]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	4a13      	ldr	r2, [pc, #76]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	490b      	ldr	r1, [pc, #44]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4904      	ldr	r1, [pc, #16]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
 8003728:	42420440 	.word	0x42420440

0800372c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b10      	cmp	r3, #16
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b10      	cmp	r3, #16
 8003752:	f200 808a 	bhi.w	800386a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d045      	beq.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d075      	beq.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003762:	e082      	b.n	800386a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003764:	4b46      	ldr	r3, [pc, #280]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800376a:	4b45      	ldr	r3, [pc, #276]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d07b      	beq.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	0c9b      	lsrs	r3, r3, #18
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	4a41      	ldr	r2, [pc, #260]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003780:	5cd3      	ldrb	r3, [r2, r3]
 8003782:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d015      	beq.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800378e:	4b3c      	ldr	r3, [pc, #240]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	0c5b      	lsrs	r3, r3, #17
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	4a3b      	ldr	r2, [pc, #236]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037a8:	4a38      	ldr	r2, [pc, #224]	; (800388c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	e004      	b.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4a34      	ldr	r2, [pc, #208]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037c4:	4b2e      	ldr	r3, [pc, #184]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d0:	d102      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	61bb      	str	r3, [r7, #24]
      break;
 80037d6:	e04a      	b.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
      break;
 80037e6:	e042      	b.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f8:	d108      	bne.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e01f      	b.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003816:	d109      	bne.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003818:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003824:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e00f      	b.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003836:	d11c      	bne.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003844:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003848:	61bb      	str	r3, [r7, #24]
      break;
 800384a:	e012      	b.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800384c:	e011      	b.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800384e:	f7ff fe85 	bl	800355c <HAL_RCC_GetPCLK2Freq>
 8003852:	4602      	mov	r2, r0
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0b9b      	lsrs	r3, r3, #14
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	3301      	adds	r3, #1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	61bb      	str	r3, [r7, #24]
      break;
 8003868:	e004      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003872:	bf00      	nop
    }
  }
  return (frequency);
 8003874:	69bb      	ldr	r3, [r7, #24]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	08004680 	.word	0x08004680
 8003888:	08004690 	.word	0x08004690
 800388c:	007a1200 	.word	0x007a1200
 8003890:	003d0900 	.word	0x003d0900
 8003894:	aaaaaaab 	.word	0xaaaaaaab

08003898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e042      	b.n	8003930 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd fd28 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f91d 	bl	8003b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b20      	cmp	r3, #32
 8003956:	d16d      	bne.n	8003a34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_UART_Transmit+0x2c>
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e066      	b.n	8003a36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2221      	movs	r2, #33	; 0x21
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003976:	f7fd fdf5 	bl	8001564 <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	88fa      	ldrh	r2, [r7, #6]
 8003986:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d108      	bne.n	80039a4 <HAL_UART_Transmit+0x6c>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d104      	bne.n	80039a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e003      	b.n	80039ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039ac:	e02a      	b.n	8003a04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	2180      	movs	r1, #128	; 0x80
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f840 	bl	8003a3e <UART_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e036      	b.n	8003a36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10b      	bne.n	80039e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	3302      	adds	r3, #2
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	e007      	b.n	80039f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	781a      	ldrb	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1cf      	bne.n	80039ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2140      	movs	r1, #64	; 0x40
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f810 	bl	8003a3e <UART_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e006      	b.n	8003a36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b090      	sub	sp, #64	; 0x40
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a4e:	e050      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d04c      	beq.n	8003af2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a5e:	f7fd fd81 	bl	8001564 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d241      	bcs.n	8003af2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a8e:	637a      	str	r2, [r7, #52]	; 0x34
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ac2:	623a      	str	r2, [r7, #32]
 8003ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e00f      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4013      	ands	r3, r2
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	bf0c      	ite	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	2300      	movne	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d09f      	beq.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3740      	adds	r7, #64	; 0x40
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b56:	f023 030c 	bic.w	r3, r3, #12
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <UART_SetConfig+0x114>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b84:	f7ff fcea 	bl	800355c <HAL_RCC_GetPCLK2Freq>
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	e002      	b.n	8003b92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f7ff fcd2 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 8003b90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009a      	lsls	r2, r3, #2
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <UART_SetConfig+0x118>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	0119      	lsls	r1, r3, #4
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009a      	lsls	r2, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <UART_SetConfig+0x118>)
 8003bca:	fba3 0302 	umull	r0, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2064      	movs	r0, #100	; 0x64
 8003bd2:	fb00 f303 	mul.w	r3, r0, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	3332      	adds	r3, #50	; 0x32
 8003bdc:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <UART_SetConfig+0x118>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be8:	4419      	add	r1, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <UART_SetConfig+0x118>)
 8003c02:	fba3 0302 	umull	r0, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2064      	movs	r0, #100	; 0x64
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <UART_SetConfig+0x118>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	440a      	add	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40013800 	.word	0x40013800
 8003c34:	51eb851f 	.word	0x51eb851f

08003c38 <sniprintf>:
 8003c38:	b40c      	push	{r2, r3}
 8003c3a:	b530      	push	{r4, r5, lr}
 8003c3c:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <sniprintf+0x64>)
 8003c3e:	1e0c      	subs	r4, r1, #0
 8003c40:	681d      	ldr	r5, [r3, #0]
 8003c42:	b09d      	sub	sp, #116	; 0x74
 8003c44:	da08      	bge.n	8003c58 <sniprintf+0x20>
 8003c46:	238b      	movs	r3, #139	; 0x8b
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	b01d      	add	sp, #116	; 0x74
 8003c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c54:	b002      	add	sp, #8
 8003c56:	4770      	bx	lr
 8003c58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c60:	bf0c      	ite	eq
 8003c62:	4623      	moveq	r3, r4
 8003c64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003c68:	9304      	str	r3, [sp, #16]
 8003c6a:	9307      	str	r3, [sp, #28]
 8003c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c70:	9002      	str	r0, [sp, #8]
 8003c72:	9006      	str	r0, [sp, #24]
 8003c74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c78:	4628      	mov	r0, r5
 8003c7a:	ab21      	add	r3, sp, #132	; 0x84
 8003c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c7e:	a902      	add	r1, sp, #8
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	f000 f9af 	bl	8003fe4 <_svfiprintf_r>
 8003c86:	1c43      	adds	r3, r0, #1
 8003c88:	bfbc      	itt	lt
 8003c8a:	238b      	movlt	r3, #139	; 0x8b
 8003c8c:	602b      	strlt	r3, [r5, #0]
 8003c8e:	2c00      	cmp	r4, #0
 8003c90:	d0dd      	beq.n	8003c4e <sniprintf+0x16>
 8003c92:	2200      	movs	r2, #0
 8003c94:	9b02      	ldr	r3, [sp, #8]
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e7d9      	b.n	8003c4e <sniprintf+0x16>
 8003c9a:	bf00      	nop
 8003c9c:	20000068 	.word	0x20000068

08003ca0 <siprintf>:
 8003ca0:	b40e      	push	{r1, r2, r3}
 8003ca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ca6:	b500      	push	{lr}
 8003ca8:	b09c      	sub	sp, #112	; 0x70
 8003caa:	ab1d      	add	r3, sp, #116	; 0x74
 8003cac:	9002      	str	r0, [sp, #8]
 8003cae:	9006      	str	r0, [sp, #24]
 8003cb0:	9107      	str	r1, [sp, #28]
 8003cb2:	9104      	str	r1, [sp, #16]
 8003cb4:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <siprintf+0x38>)
 8003cb6:	4909      	ldr	r1, [pc, #36]	; (8003cdc <siprintf+0x3c>)
 8003cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cbc:	9105      	str	r1, [sp, #20]
 8003cbe:	6800      	ldr	r0, [r0, #0]
 8003cc0:	a902      	add	r1, sp, #8
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	f000 f98e 	bl	8003fe4 <_svfiprintf_r>
 8003cc8:	2200      	movs	r2, #0
 8003cca:	9b02      	ldr	r3, [sp, #8]
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	b01c      	add	sp, #112	; 0x70
 8003cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cd4:	b003      	add	sp, #12
 8003cd6:	4770      	bx	lr
 8003cd8:	20000068 	.word	0x20000068
 8003cdc:	ffff0208 	.word	0xffff0208

08003ce0 <memset>:
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4402      	add	r2, r0
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d100      	bne.n	8003cea <memset+0xa>
 8003ce8:	4770      	bx	lr
 8003cea:	f803 1b01 	strb.w	r1, [r3], #1
 8003cee:	e7f9      	b.n	8003ce4 <memset+0x4>

08003cf0 <__errno>:
 8003cf0:	4b01      	ldr	r3, [pc, #4]	; (8003cf8 <__errno+0x8>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000068 	.word	0x20000068

08003cfc <__libc_init_array>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	2600      	movs	r6, #0
 8003d00:	4d0c      	ldr	r5, [pc, #48]	; (8003d34 <__libc_init_array+0x38>)
 8003d02:	4c0d      	ldr	r4, [pc, #52]	; (8003d38 <__libc_init_array+0x3c>)
 8003d04:	1b64      	subs	r4, r4, r5
 8003d06:	10a4      	asrs	r4, r4, #2
 8003d08:	42a6      	cmp	r6, r4
 8003d0a:	d109      	bne.n	8003d20 <__libc_init_array+0x24>
 8003d0c:	f000 fc7a 	bl	8004604 <_init>
 8003d10:	2600      	movs	r6, #0
 8003d12:	4d0a      	ldr	r5, [pc, #40]	; (8003d3c <__libc_init_array+0x40>)
 8003d14:	4c0a      	ldr	r4, [pc, #40]	; (8003d40 <__libc_init_array+0x44>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	42a6      	cmp	r6, r4
 8003d1c:	d105      	bne.n	8003d2a <__libc_init_array+0x2e>
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d24:	4798      	blx	r3
 8003d26:	3601      	adds	r6, #1
 8003d28:	e7ee      	b.n	8003d08 <__libc_init_array+0xc>
 8003d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2e:	4798      	blx	r3
 8003d30:	3601      	adds	r6, #1
 8003d32:	e7f2      	b.n	8003d1a <__libc_init_array+0x1e>
 8003d34:	080046c8 	.word	0x080046c8
 8003d38:	080046c8 	.word	0x080046c8
 8003d3c:	080046c8 	.word	0x080046c8
 8003d40:	080046cc 	.word	0x080046cc

08003d44 <__retarget_lock_acquire_recursive>:
 8003d44:	4770      	bx	lr

08003d46 <__retarget_lock_release_recursive>:
 8003d46:	4770      	bx	lr

08003d48 <_free_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	d040      	beq.n	8003dd2 <_free_r+0x8a>
 8003d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d54:	1f0c      	subs	r4, r1, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bfb8      	it	lt
 8003d5a:	18e4      	addlt	r4, r4, r3
 8003d5c:	f000 f8dc 	bl	8003f18 <__malloc_lock>
 8003d60:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <_free_r+0x8c>)
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	b933      	cbnz	r3, 8003d74 <_free_r+0x2c>
 8003d66:	6063      	str	r3, [r4, #4]
 8003d68:	6014      	str	r4, [r2, #0]
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d70:	f000 b8d8 	b.w	8003f24 <__malloc_unlock>
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	d908      	bls.n	8003d8a <_free_r+0x42>
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	1821      	adds	r1, r4, r0
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	bf01      	itttt	eq
 8003d80:	6819      	ldreq	r1, [r3, #0]
 8003d82:	685b      	ldreq	r3, [r3, #4]
 8003d84:	1809      	addeq	r1, r1, r0
 8003d86:	6021      	streq	r1, [r4, #0]
 8003d88:	e7ed      	b.n	8003d66 <_free_r+0x1e>
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	b10b      	cbz	r3, 8003d94 <_free_r+0x4c>
 8003d90:	42a3      	cmp	r3, r4
 8003d92:	d9fa      	bls.n	8003d8a <_free_r+0x42>
 8003d94:	6811      	ldr	r1, [r2, #0]
 8003d96:	1850      	adds	r0, r2, r1
 8003d98:	42a0      	cmp	r0, r4
 8003d9a:	d10b      	bne.n	8003db4 <_free_r+0x6c>
 8003d9c:	6820      	ldr	r0, [r4, #0]
 8003d9e:	4401      	add	r1, r0
 8003da0:	1850      	adds	r0, r2, r1
 8003da2:	4283      	cmp	r3, r0
 8003da4:	6011      	str	r1, [r2, #0]
 8003da6:	d1e0      	bne.n	8003d6a <_free_r+0x22>
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4408      	add	r0, r1
 8003dae:	6010      	str	r0, [r2, #0]
 8003db0:	6053      	str	r3, [r2, #4]
 8003db2:	e7da      	b.n	8003d6a <_free_r+0x22>
 8003db4:	d902      	bls.n	8003dbc <_free_r+0x74>
 8003db6:	230c      	movs	r3, #12
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	e7d6      	b.n	8003d6a <_free_r+0x22>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	1821      	adds	r1, r4, r0
 8003dc0:	428b      	cmp	r3, r1
 8003dc2:	bf01      	itttt	eq
 8003dc4:	6819      	ldreq	r1, [r3, #0]
 8003dc6:	685b      	ldreq	r3, [r3, #4]
 8003dc8:	1809      	addeq	r1, r1, r0
 8003dca:	6021      	streq	r1, [r4, #0]
 8003dcc:	6063      	str	r3, [r4, #4]
 8003dce:	6054      	str	r4, [r2, #4]
 8003dd0:	e7cb      	b.n	8003d6a <_free_r+0x22>
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	200002f0 	.word	0x200002f0

08003dd8 <sbrk_aligned>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	4e0e      	ldr	r6, [pc, #56]	; (8003e14 <sbrk_aligned+0x3c>)
 8003ddc:	460c      	mov	r4, r1
 8003dde:	6831      	ldr	r1, [r6, #0]
 8003de0:	4605      	mov	r5, r0
 8003de2:	b911      	cbnz	r1, 8003dea <sbrk_aligned+0x12>
 8003de4:	f000 fbaa 	bl	800453c <_sbrk_r>
 8003de8:	6030      	str	r0, [r6, #0]
 8003dea:	4621      	mov	r1, r4
 8003dec:	4628      	mov	r0, r5
 8003dee:	f000 fba5 	bl	800453c <_sbrk_r>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d00a      	beq.n	8003e0c <sbrk_aligned+0x34>
 8003df6:	1cc4      	adds	r4, r0, #3
 8003df8:	f024 0403 	bic.w	r4, r4, #3
 8003dfc:	42a0      	cmp	r0, r4
 8003dfe:	d007      	beq.n	8003e10 <sbrk_aligned+0x38>
 8003e00:	1a21      	subs	r1, r4, r0
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 fb9a 	bl	800453c <_sbrk_r>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d101      	bne.n	8003e10 <sbrk_aligned+0x38>
 8003e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8003e10:	4620      	mov	r0, r4
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	200002f4 	.word	0x200002f4

08003e18 <_malloc_r>:
 8003e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e1c:	1ccd      	adds	r5, r1, #3
 8003e1e:	f025 0503 	bic.w	r5, r5, #3
 8003e22:	3508      	adds	r5, #8
 8003e24:	2d0c      	cmp	r5, #12
 8003e26:	bf38      	it	cc
 8003e28:	250c      	movcc	r5, #12
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	4607      	mov	r7, r0
 8003e2e:	db01      	blt.n	8003e34 <_malloc_r+0x1c>
 8003e30:	42a9      	cmp	r1, r5
 8003e32:	d905      	bls.n	8003e40 <_malloc_r+0x28>
 8003e34:	230c      	movs	r3, #12
 8003e36:	2600      	movs	r6, #0
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f14 <_malloc_r+0xfc>
 8003e44:	f000 f868 	bl	8003f18 <__malloc_lock>
 8003e48:	f8d8 3000 	ldr.w	r3, [r8]
 8003e4c:	461c      	mov	r4, r3
 8003e4e:	bb5c      	cbnz	r4, 8003ea8 <_malloc_r+0x90>
 8003e50:	4629      	mov	r1, r5
 8003e52:	4638      	mov	r0, r7
 8003e54:	f7ff ffc0 	bl	8003dd8 <sbrk_aligned>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	d155      	bne.n	8003f0a <_malloc_r+0xf2>
 8003e5e:	f8d8 4000 	ldr.w	r4, [r8]
 8003e62:	4626      	mov	r6, r4
 8003e64:	2e00      	cmp	r6, #0
 8003e66:	d145      	bne.n	8003ef4 <_malloc_r+0xdc>
 8003e68:	2c00      	cmp	r4, #0
 8003e6a:	d048      	beq.n	8003efe <_malloc_r+0xe6>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	4631      	mov	r1, r6
 8003e70:	4638      	mov	r0, r7
 8003e72:	eb04 0903 	add.w	r9, r4, r3
 8003e76:	f000 fb61 	bl	800453c <_sbrk_r>
 8003e7a:	4581      	cmp	r9, r0
 8003e7c:	d13f      	bne.n	8003efe <_malloc_r+0xe6>
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	4638      	mov	r0, r7
 8003e82:	1a6d      	subs	r5, r5, r1
 8003e84:	4629      	mov	r1, r5
 8003e86:	f7ff ffa7 	bl	8003dd8 <sbrk_aligned>
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d037      	beq.n	8003efe <_malloc_r+0xe6>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	442b      	add	r3, r5
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	f8d8 3000 	ldr.w	r3, [r8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d038      	beq.n	8003f0e <_malloc_r+0xf6>
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	42a2      	cmp	r2, r4
 8003ea0:	d12b      	bne.n	8003efa <_malloc_r+0xe2>
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	e00f      	b.n	8003ec8 <_malloc_r+0xb0>
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	1b52      	subs	r2, r2, r5
 8003eac:	d41f      	bmi.n	8003eee <_malloc_r+0xd6>
 8003eae:	2a0b      	cmp	r2, #11
 8003eb0:	d917      	bls.n	8003ee2 <_malloc_r+0xca>
 8003eb2:	1961      	adds	r1, r4, r5
 8003eb4:	42a3      	cmp	r3, r4
 8003eb6:	6025      	str	r5, [r4, #0]
 8003eb8:	bf18      	it	ne
 8003eba:	6059      	strne	r1, [r3, #4]
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	bf08      	it	eq
 8003ec0:	f8c8 1000 	streq.w	r1, [r8]
 8003ec4:	5162      	str	r2, [r4, r5]
 8003ec6:	604b      	str	r3, [r1, #4]
 8003ec8:	4638      	mov	r0, r7
 8003eca:	f104 060b 	add.w	r6, r4, #11
 8003ece:	f000 f829 	bl	8003f24 <__malloc_unlock>
 8003ed2:	f026 0607 	bic.w	r6, r6, #7
 8003ed6:	1d23      	adds	r3, r4, #4
 8003ed8:	1af2      	subs	r2, r6, r3
 8003eda:	d0ae      	beq.n	8003e3a <_malloc_r+0x22>
 8003edc:	1b9b      	subs	r3, r3, r6
 8003ede:	50a3      	str	r3, [r4, r2]
 8003ee0:	e7ab      	b.n	8003e3a <_malloc_r+0x22>
 8003ee2:	42a3      	cmp	r3, r4
 8003ee4:	6862      	ldr	r2, [r4, #4]
 8003ee6:	d1dd      	bne.n	8003ea4 <_malloc_r+0x8c>
 8003ee8:	f8c8 2000 	str.w	r2, [r8]
 8003eec:	e7ec      	b.n	8003ec8 <_malloc_r+0xb0>
 8003eee:	4623      	mov	r3, r4
 8003ef0:	6864      	ldr	r4, [r4, #4]
 8003ef2:	e7ac      	b.n	8003e4e <_malloc_r+0x36>
 8003ef4:	4634      	mov	r4, r6
 8003ef6:	6876      	ldr	r6, [r6, #4]
 8003ef8:	e7b4      	b.n	8003e64 <_malloc_r+0x4c>
 8003efa:	4613      	mov	r3, r2
 8003efc:	e7cc      	b.n	8003e98 <_malloc_r+0x80>
 8003efe:	230c      	movs	r3, #12
 8003f00:	4638      	mov	r0, r7
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	f000 f80e 	bl	8003f24 <__malloc_unlock>
 8003f08:	e797      	b.n	8003e3a <_malloc_r+0x22>
 8003f0a:	6025      	str	r5, [r4, #0]
 8003f0c:	e7dc      	b.n	8003ec8 <_malloc_r+0xb0>
 8003f0e:	605b      	str	r3, [r3, #4]
 8003f10:	deff      	udf	#255	; 0xff
 8003f12:	bf00      	nop
 8003f14:	200002f0 	.word	0x200002f0

08003f18 <__malloc_lock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_lock+0x8>)
 8003f1a:	f7ff bf13 	b.w	8003d44 <__retarget_lock_acquire_recursive>
 8003f1e:	bf00      	nop
 8003f20:	200002ec 	.word	0x200002ec

08003f24 <__malloc_unlock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <__malloc_unlock+0x8>)
 8003f26:	f7ff bf0e 	b.w	8003d46 <__retarget_lock_release_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	200002ec 	.word	0x200002ec

08003f30 <__ssputs_r>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	461f      	mov	r7, r3
 8003f36:	688e      	ldr	r6, [r1, #8]
 8003f38:	4682      	mov	sl, r0
 8003f3a:	42be      	cmp	r6, r7
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	4690      	mov	r8, r2
 8003f40:	680b      	ldr	r3, [r1, #0]
 8003f42:	d82c      	bhi.n	8003f9e <__ssputs_r+0x6e>
 8003f44:	898a      	ldrh	r2, [r1, #12]
 8003f46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f4a:	d026      	beq.n	8003f9a <__ssputs_r+0x6a>
 8003f4c:	6965      	ldr	r5, [r4, #20]
 8003f4e:	6909      	ldr	r1, [r1, #16]
 8003f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f54:	eba3 0901 	sub.w	r9, r3, r1
 8003f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f5c:	1c7b      	adds	r3, r7, #1
 8003f5e:	444b      	add	r3, r9
 8003f60:	106d      	asrs	r5, r5, #1
 8003f62:	429d      	cmp	r5, r3
 8003f64:	bf38      	it	cc
 8003f66:	461d      	movcc	r5, r3
 8003f68:	0553      	lsls	r3, r2, #21
 8003f6a:	d527      	bpl.n	8003fbc <__ssputs_r+0x8c>
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7ff ff53 	bl	8003e18 <_malloc_r>
 8003f72:	4606      	mov	r6, r0
 8003f74:	b360      	cbz	r0, 8003fd0 <__ssputs_r+0xa0>
 8003f76:	464a      	mov	r2, r9
 8003f78:	6921      	ldr	r1, [r4, #16]
 8003f7a:	f000 fafd 	bl	8004578 <memcpy>
 8003f7e:	89a3      	ldrh	r3, [r4, #12]
 8003f80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	6126      	str	r6, [r4, #16]
 8003f8c:	444e      	add	r6, r9
 8003f8e:	6026      	str	r6, [r4, #0]
 8003f90:	463e      	mov	r6, r7
 8003f92:	6165      	str	r5, [r4, #20]
 8003f94:	eba5 0509 	sub.w	r5, r5, r9
 8003f98:	60a5      	str	r5, [r4, #8]
 8003f9a:	42be      	cmp	r6, r7
 8003f9c:	d900      	bls.n	8003fa0 <__ssputs_r+0x70>
 8003f9e:	463e      	mov	r6, r7
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	f000 faaf 	bl	8004508 <memmove>
 8003faa:	2000      	movs	r0, #0
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	1b9b      	subs	r3, r3, r6
 8003fb0:	60a3      	str	r3, [r4, #8]
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	4433      	add	r3, r6
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fbc:	462a      	mov	r2, r5
 8003fbe:	f000 fae9 	bl	8004594 <_realloc_r>
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d1e0      	bne.n	8003f8a <__ssputs_r+0x5a>
 8003fc8:	4650      	mov	r0, sl
 8003fca:	6921      	ldr	r1, [r4, #16]
 8003fcc:	f7ff febc 	bl	8003d48 <_free_r>
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	f8ca 3000 	str.w	r3, [sl]
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe0:	81a3      	strh	r3, [r4, #12]
 8003fe2:	e7e9      	b.n	8003fb8 <__ssputs_r+0x88>

08003fe4 <_svfiprintf_r>:
 8003fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe8:	4698      	mov	r8, r3
 8003fea:	898b      	ldrh	r3, [r1, #12]
 8003fec:	4607      	mov	r7, r0
 8003fee:	061b      	lsls	r3, r3, #24
 8003ff0:	460d      	mov	r5, r1
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	b09d      	sub	sp, #116	; 0x74
 8003ff6:	d50e      	bpl.n	8004016 <_svfiprintf_r+0x32>
 8003ff8:	690b      	ldr	r3, [r1, #16]
 8003ffa:	b963      	cbnz	r3, 8004016 <_svfiprintf_r+0x32>
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	f7ff ff0b 	bl	8003e18 <_malloc_r>
 8004002:	6028      	str	r0, [r5, #0]
 8004004:	6128      	str	r0, [r5, #16]
 8004006:	b920      	cbnz	r0, 8004012 <_svfiprintf_r+0x2e>
 8004008:	230c      	movs	r3, #12
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	e0d0      	b.n	80041b4 <_svfiprintf_r+0x1d0>
 8004012:	2340      	movs	r3, #64	; 0x40
 8004014:	616b      	str	r3, [r5, #20]
 8004016:	2300      	movs	r3, #0
 8004018:	9309      	str	r3, [sp, #36]	; 0x24
 800401a:	2320      	movs	r3, #32
 800401c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004020:	2330      	movs	r3, #48	; 0x30
 8004022:	f04f 0901 	mov.w	r9, #1
 8004026:	f8cd 800c 	str.w	r8, [sp, #12]
 800402a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80041cc <_svfiprintf_r+0x1e8>
 800402e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004032:	4623      	mov	r3, r4
 8004034:	469a      	mov	sl, r3
 8004036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800403a:	b10a      	cbz	r2, 8004040 <_svfiprintf_r+0x5c>
 800403c:	2a25      	cmp	r2, #37	; 0x25
 800403e:	d1f9      	bne.n	8004034 <_svfiprintf_r+0x50>
 8004040:	ebba 0b04 	subs.w	fp, sl, r4
 8004044:	d00b      	beq.n	800405e <_svfiprintf_r+0x7a>
 8004046:	465b      	mov	r3, fp
 8004048:	4622      	mov	r2, r4
 800404a:	4629      	mov	r1, r5
 800404c:	4638      	mov	r0, r7
 800404e:	f7ff ff6f 	bl	8003f30 <__ssputs_r>
 8004052:	3001      	adds	r0, #1
 8004054:	f000 80a9 	beq.w	80041aa <_svfiprintf_r+0x1c6>
 8004058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800405a:	445a      	add	r2, fp
 800405c:	9209      	str	r2, [sp, #36]	; 0x24
 800405e:	f89a 3000 	ldrb.w	r3, [sl]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80a1 	beq.w	80041aa <_svfiprintf_r+0x1c6>
 8004068:	2300      	movs	r3, #0
 800406a:	f04f 32ff 	mov.w	r2, #4294967295
 800406e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004072:	f10a 0a01 	add.w	sl, sl, #1
 8004076:	9304      	str	r3, [sp, #16]
 8004078:	9307      	str	r3, [sp, #28]
 800407a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800407e:	931a      	str	r3, [sp, #104]	; 0x68
 8004080:	4654      	mov	r4, sl
 8004082:	2205      	movs	r2, #5
 8004084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004088:	4850      	ldr	r0, [pc, #320]	; (80041cc <_svfiprintf_r+0x1e8>)
 800408a:	f000 fa67 	bl	800455c <memchr>
 800408e:	9a04      	ldr	r2, [sp, #16]
 8004090:	b9d8      	cbnz	r0, 80040ca <_svfiprintf_r+0xe6>
 8004092:	06d0      	lsls	r0, r2, #27
 8004094:	bf44      	itt	mi
 8004096:	2320      	movmi	r3, #32
 8004098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800409c:	0711      	lsls	r1, r2, #28
 800409e:	bf44      	itt	mi
 80040a0:	232b      	movmi	r3, #43	; 0x2b
 80040a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040a6:	f89a 3000 	ldrb.w	r3, [sl]
 80040aa:	2b2a      	cmp	r3, #42	; 0x2a
 80040ac:	d015      	beq.n	80040da <_svfiprintf_r+0xf6>
 80040ae:	4654      	mov	r4, sl
 80040b0:	2000      	movs	r0, #0
 80040b2:	f04f 0c0a 	mov.w	ip, #10
 80040b6:	9a07      	ldr	r2, [sp, #28]
 80040b8:	4621      	mov	r1, r4
 80040ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040be:	3b30      	subs	r3, #48	; 0x30
 80040c0:	2b09      	cmp	r3, #9
 80040c2:	d94d      	bls.n	8004160 <_svfiprintf_r+0x17c>
 80040c4:	b1b0      	cbz	r0, 80040f4 <_svfiprintf_r+0x110>
 80040c6:	9207      	str	r2, [sp, #28]
 80040c8:	e014      	b.n	80040f4 <_svfiprintf_r+0x110>
 80040ca:	eba0 0308 	sub.w	r3, r0, r8
 80040ce:	fa09 f303 	lsl.w	r3, r9, r3
 80040d2:	4313      	orrs	r3, r2
 80040d4:	46a2      	mov	sl, r4
 80040d6:	9304      	str	r3, [sp, #16]
 80040d8:	e7d2      	b.n	8004080 <_svfiprintf_r+0x9c>
 80040da:	9b03      	ldr	r3, [sp, #12]
 80040dc:	1d19      	adds	r1, r3, #4
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	9103      	str	r1, [sp, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bfbb      	ittet	lt
 80040e6:	425b      	neglt	r3, r3
 80040e8:	f042 0202 	orrlt.w	r2, r2, #2
 80040ec:	9307      	strge	r3, [sp, #28]
 80040ee:	9307      	strlt	r3, [sp, #28]
 80040f0:	bfb8      	it	lt
 80040f2:	9204      	strlt	r2, [sp, #16]
 80040f4:	7823      	ldrb	r3, [r4, #0]
 80040f6:	2b2e      	cmp	r3, #46	; 0x2e
 80040f8:	d10c      	bne.n	8004114 <_svfiprintf_r+0x130>
 80040fa:	7863      	ldrb	r3, [r4, #1]
 80040fc:	2b2a      	cmp	r3, #42	; 0x2a
 80040fe:	d134      	bne.n	800416a <_svfiprintf_r+0x186>
 8004100:	9b03      	ldr	r3, [sp, #12]
 8004102:	3402      	adds	r4, #2
 8004104:	1d1a      	adds	r2, r3, #4
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	9203      	str	r2, [sp, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	bfb8      	it	lt
 800410e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004112:	9305      	str	r3, [sp, #20]
 8004114:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80041d0 <_svfiprintf_r+0x1ec>
 8004118:	2203      	movs	r2, #3
 800411a:	4650      	mov	r0, sl
 800411c:	7821      	ldrb	r1, [r4, #0]
 800411e:	f000 fa1d 	bl	800455c <memchr>
 8004122:	b138      	cbz	r0, 8004134 <_svfiprintf_r+0x150>
 8004124:	2240      	movs	r2, #64	; 0x40
 8004126:	9b04      	ldr	r3, [sp, #16]
 8004128:	eba0 000a 	sub.w	r0, r0, sl
 800412c:	4082      	lsls	r2, r0
 800412e:	4313      	orrs	r3, r2
 8004130:	3401      	adds	r4, #1
 8004132:	9304      	str	r3, [sp, #16]
 8004134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004138:	2206      	movs	r2, #6
 800413a:	4826      	ldr	r0, [pc, #152]	; (80041d4 <_svfiprintf_r+0x1f0>)
 800413c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004140:	f000 fa0c 	bl	800455c <memchr>
 8004144:	2800      	cmp	r0, #0
 8004146:	d038      	beq.n	80041ba <_svfiprintf_r+0x1d6>
 8004148:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <_svfiprintf_r+0x1f4>)
 800414a:	bb1b      	cbnz	r3, 8004194 <_svfiprintf_r+0x1b0>
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	3307      	adds	r3, #7
 8004150:	f023 0307 	bic.w	r3, r3, #7
 8004154:	3308      	adds	r3, #8
 8004156:	9303      	str	r3, [sp, #12]
 8004158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800415a:	4433      	add	r3, r6
 800415c:	9309      	str	r3, [sp, #36]	; 0x24
 800415e:	e768      	b.n	8004032 <_svfiprintf_r+0x4e>
 8004160:	460c      	mov	r4, r1
 8004162:	2001      	movs	r0, #1
 8004164:	fb0c 3202 	mla	r2, ip, r2, r3
 8004168:	e7a6      	b.n	80040b8 <_svfiprintf_r+0xd4>
 800416a:	2300      	movs	r3, #0
 800416c:	f04f 0c0a 	mov.w	ip, #10
 8004170:	4619      	mov	r1, r3
 8004172:	3401      	adds	r4, #1
 8004174:	9305      	str	r3, [sp, #20]
 8004176:	4620      	mov	r0, r4
 8004178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800417c:	3a30      	subs	r2, #48	; 0x30
 800417e:	2a09      	cmp	r2, #9
 8004180:	d903      	bls.n	800418a <_svfiprintf_r+0x1a6>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0c6      	beq.n	8004114 <_svfiprintf_r+0x130>
 8004186:	9105      	str	r1, [sp, #20]
 8004188:	e7c4      	b.n	8004114 <_svfiprintf_r+0x130>
 800418a:	4604      	mov	r4, r0
 800418c:	2301      	movs	r3, #1
 800418e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004192:	e7f0      	b.n	8004176 <_svfiprintf_r+0x192>
 8004194:	ab03      	add	r3, sp, #12
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	462a      	mov	r2, r5
 800419a:	4638      	mov	r0, r7
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <_svfiprintf_r+0x1f8>)
 800419e:	a904      	add	r1, sp, #16
 80041a0:	f3af 8000 	nop.w
 80041a4:	1c42      	adds	r2, r0, #1
 80041a6:	4606      	mov	r6, r0
 80041a8:	d1d6      	bne.n	8004158 <_svfiprintf_r+0x174>
 80041aa:	89ab      	ldrh	r3, [r5, #12]
 80041ac:	065b      	lsls	r3, r3, #25
 80041ae:	f53f af2d 	bmi.w	800400c <_svfiprintf_r+0x28>
 80041b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041b4:	b01d      	add	sp, #116	; 0x74
 80041b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ba:	ab03      	add	r3, sp, #12
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	462a      	mov	r2, r5
 80041c0:	4638      	mov	r0, r7
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <_svfiprintf_r+0x1f8>)
 80041c4:	a904      	add	r1, sp, #16
 80041c6:	f000 f87d 	bl	80042c4 <_printf_i>
 80041ca:	e7eb      	b.n	80041a4 <_svfiprintf_r+0x1c0>
 80041cc:	08004692 	.word	0x08004692
 80041d0:	08004698 	.word	0x08004698
 80041d4:	0800469c 	.word	0x0800469c
 80041d8:	00000000 	.word	0x00000000
 80041dc:	08003f31 	.word	0x08003f31

080041e0 <_printf_common>:
 80041e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	4616      	mov	r6, r2
 80041e6:	4699      	mov	r9, r3
 80041e8:	688a      	ldr	r2, [r1, #8]
 80041ea:	690b      	ldr	r3, [r1, #16]
 80041ec:	4607      	mov	r7, r0
 80041ee:	4293      	cmp	r3, r2
 80041f0:	bfb8      	it	lt
 80041f2:	4613      	movlt	r3, r2
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041fa:	460c      	mov	r4, r1
 80041fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004200:	b10a      	cbz	r2, 8004206 <_printf_common+0x26>
 8004202:	3301      	adds	r3, #1
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	0699      	lsls	r1, r3, #26
 800420a:	bf42      	ittt	mi
 800420c:	6833      	ldrmi	r3, [r6, #0]
 800420e:	3302      	addmi	r3, #2
 8004210:	6033      	strmi	r3, [r6, #0]
 8004212:	6825      	ldr	r5, [r4, #0]
 8004214:	f015 0506 	ands.w	r5, r5, #6
 8004218:	d106      	bne.n	8004228 <_printf_common+0x48>
 800421a:	f104 0a19 	add.w	sl, r4, #25
 800421e:	68e3      	ldr	r3, [r4, #12]
 8004220:	6832      	ldr	r2, [r6, #0]
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	42ab      	cmp	r3, r5
 8004226:	dc2b      	bgt.n	8004280 <_printf_common+0xa0>
 8004228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800422c:	1e13      	subs	r3, r2, #0
 800422e:	6822      	ldr	r2, [r4, #0]
 8004230:	bf18      	it	ne
 8004232:	2301      	movne	r3, #1
 8004234:	0692      	lsls	r2, r2, #26
 8004236:	d430      	bmi.n	800429a <_printf_common+0xba>
 8004238:	4649      	mov	r1, r9
 800423a:	4638      	mov	r0, r7
 800423c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004240:	47c0      	blx	r8
 8004242:	3001      	adds	r0, #1
 8004244:	d023      	beq.n	800428e <_printf_common+0xae>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	2b04      	cmp	r3, #4
 8004250:	bf14      	ite	ne
 8004252:	2500      	movne	r5, #0
 8004254:	6833      	ldreq	r3, [r6, #0]
 8004256:	f04f 0600 	mov.w	r6, #0
 800425a:	bf08      	it	eq
 800425c:	68e5      	ldreq	r5, [r4, #12]
 800425e:	f104 041a 	add.w	r4, r4, #26
 8004262:	bf08      	it	eq
 8004264:	1aed      	subeq	r5, r5, r3
 8004266:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800426a:	bf08      	it	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	4293      	cmp	r3, r2
 8004272:	bfc4      	itt	gt
 8004274:	1a9b      	subgt	r3, r3, r2
 8004276:	18ed      	addgt	r5, r5, r3
 8004278:	42b5      	cmp	r5, r6
 800427a:	d11a      	bne.n	80042b2 <_printf_common+0xd2>
 800427c:	2000      	movs	r0, #0
 800427e:	e008      	b.n	8004292 <_printf_common+0xb2>
 8004280:	2301      	movs	r3, #1
 8004282:	4652      	mov	r2, sl
 8004284:	4649      	mov	r1, r9
 8004286:	4638      	mov	r0, r7
 8004288:	47c0      	blx	r8
 800428a:	3001      	adds	r0, #1
 800428c:	d103      	bne.n	8004296 <_printf_common+0xb6>
 800428e:	f04f 30ff 	mov.w	r0, #4294967295
 8004292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004296:	3501      	adds	r5, #1
 8004298:	e7c1      	b.n	800421e <_printf_common+0x3e>
 800429a:	2030      	movs	r0, #48	; 0x30
 800429c:	18e1      	adds	r1, r4, r3
 800429e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042a8:	4422      	add	r2, r4
 80042aa:	3302      	adds	r3, #2
 80042ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b0:	e7c2      	b.n	8004238 <_printf_common+0x58>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4622      	mov	r2, r4
 80042b6:	4649      	mov	r1, r9
 80042b8:	4638      	mov	r0, r7
 80042ba:	47c0      	blx	r8
 80042bc:	3001      	adds	r0, #1
 80042be:	d0e6      	beq.n	800428e <_printf_common+0xae>
 80042c0:	3601      	adds	r6, #1
 80042c2:	e7d9      	b.n	8004278 <_printf_common+0x98>

080042c4 <_printf_i>:
 80042c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	7e0f      	ldrb	r7, [r1, #24]
 80042ca:	4691      	mov	r9, r2
 80042cc:	2f78      	cmp	r7, #120	; 0x78
 80042ce:	4680      	mov	r8, r0
 80042d0:	460c      	mov	r4, r1
 80042d2:	469a      	mov	sl, r3
 80042d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042da:	d807      	bhi.n	80042ec <_printf_i+0x28>
 80042dc:	2f62      	cmp	r7, #98	; 0x62
 80042de:	d80a      	bhi.n	80042f6 <_printf_i+0x32>
 80042e0:	2f00      	cmp	r7, #0
 80042e2:	f000 80d5 	beq.w	8004490 <_printf_i+0x1cc>
 80042e6:	2f58      	cmp	r7, #88	; 0x58
 80042e8:	f000 80c1 	beq.w	800446e <_printf_i+0x1aa>
 80042ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042f4:	e03a      	b.n	800436c <_printf_i+0xa8>
 80042f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042fa:	2b15      	cmp	r3, #21
 80042fc:	d8f6      	bhi.n	80042ec <_printf_i+0x28>
 80042fe:	a101      	add	r1, pc, #4	; (adr r1, 8004304 <_printf_i+0x40>)
 8004300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004304:	0800435d 	.word	0x0800435d
 8004308:	08004371 	.word	0x08004371
 800430c:	080042ed 	.word	0x080042ed
 8004310:	080042ed 	.word	0x080042ed
 8004314:	080042ed 	.word	0x080042ed
 8004318:	080042ed 	.word	0x080042ed
 800431c:	08004371 	.word	0x08004371
 8004320:	080042ed 	.word	0x080042ed
 8004324:	080042ed 	.word	0x080042ed
 8004328:	080042ed 	.word	0x080042ed
 800432c:	080042ed 	.word	0x080042ed
 8004330:	08004477 	.word	0x08004477
 8004334:	0800439d 	.word	0x0800439d
 8004338:	08004431 	.word	0x08004431
 800433c:	080042ed 	.word	0x080042ed
 8004340:	080042ed 	.word	0x080042ed
 8004344:	08004499 	.word	0x08004499
 8004348:	080042ed 	.word	0x080042ed
 800434c:	0800439d 	.word	0x0800439d
 8004350:	080042ed 	.word	0x080042ed
 8004354:	080042ed 	.word	0x080042ed
 8004358:	08004439 	.word	0x08004439
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	602a      	str	r2, [r5, #0]
 8004364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800436c:	2301      	movs	r3, #1
 800436e:	e0a0      	b.n	80044b2 <_printf_i+0x1ee>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	0607      	lsls	r7, r0, #24
 8004376:	f103 0104 	add.w	r1, r3, #4
 800437a:	6029      	str	r1, [r5, #0]
 800437c:	d501      	bpl.n	8004382 <_printf_i+0xbe>
 800437e:	681e      	ldr	r6, [r3, #0]
 8004380:	e003      	b.n	800438a <_printf_i+0xc6>
 8004382:	0646      	lsls	r6, r0, #25
 8004384:	d5fb      	bpl.n	800437e <_printf_i+0xba>
 8004386:	f9b3 6000 	ldrsh.w	r6, [r3]
 800438a:	2e00      	cmp	r6, #0
 800438c:	da03      	bge.n	8004396 <_printf_i+0xd2>
 800438e:	232d      	movs	r3, #45	; 0x2d
 8004390:	4276      	negs	r6, r6
 8004392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004396:	230a      	movs	r3, #10
 8004398:	4859      	ldr	r0, [pc, #356]	; (8004500 <_printf_i+0x23c>)
 800439a:	e012      	b.n	80043c2 <_printf_i+0xfe>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	6820      	ldr	r0, [r4, #0]
 80043a0:	1d19      	adds	r1, r3, #4
 80043a2:	6029      	str	r1, [r5, #0]
 80043a4:	0605      	lsls	r5, r0, #24
 80043a6:	d501      	bpl.n	80043ac <_printf_i+0xe8>
 80043a8:	681e      	ldr	r6, [r3, #0]
 80043aa:	e002      	b.n	80043b2 <_printf_i+0xee>
 80043ac:	0641      	lsls	r1, r0, #25
 80043ae:	d5fb      	bpl.n	80043a8 <_printf_i+0xe4>
 80043b0:	881e      	ldrh	r6, [r3, #0]
 80043b2:	2f6f      	cmp	r7, #111	; 0x6f
 80043b4:	bf0c      	ite	eq
 80043b6:	2308      	moveq	r3, #8
 80043b8:	230a      	movne	r3, #10
 80043ba:	4851      	ldr	r0, [pc, #324]	; (8004500 <_printf_i+0x23c>)
 80043bc:	2100      	movs	r1, #0
 80043be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043c2:	6865      	ldr	r5, [r4, #4]
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	bfa8      	it	ge
 80043c8:	6821      	ldrge	r1, [r4, #0]
 80043ca:	60a5      	str	r5, [r4, #8]
 80043cc:	bfa4      	itt	ge
 80043ce:	f021 0104 	bicge.w	r1, r1, #4
 80043d2:	6021      	strge	r1, [r4, #0]
 80043d4:	b90e      	cbnz	r6, 80043da <_printf_i+0x116>
 80043d6:	2d00      	cmp	r5, #0
 80043d8:	d04b      	beq.n	8004472 <_printf_i+0x1ae>
 80043da:	4615      	mov	r5, r2
 80043dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80043e0:	fb03 6711 	mls	r7, r3, r1, r6
 80043e4:	5dc7      	ldrb	r7, [r0, r7]
 80043e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043ea:	4637      	mov	r7, r6
 80043ec:	42bb      	cmp	r3, r7
 80043ee:	460e      	mov	r6, r1
 80043f0:	d9f4      	bls.n	80043dc <_printf_i+0x118>
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d10b      	bne.n	800440e <_printf_i+0x14a>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	07de      	lsls	r6, r3, #31
 80043fa:	d508      	bpl.n	800440e <_printf_i+0x14a>
 80043fc:	6923      	ldr	r3, [r4, #16]
 80043fe:	6861      	ldr	r1, [r4, #4]
 8004400:	4299      	cmp	r1, r3
 8004402:	bfde      	ittt	le
 8004404:	2330      	movle	r3, #48	; 0x30
 8004406:	f805 3c01 	strble.w	r3, [r5, #-1]
 800440a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800440e:	1b52      	subs	r2, r2, r5
 8004410:	6122      	str	r2, [r4, #16]
 8004412:	464b      	mov	r3, r9
 8004414:	4621      	mov	r1, r4
 8004416:	4640      	mov	r0, r8
 8004418:	f8cd a000 	str.w	sl, [sp]
 800441c:	aa03      	add	r2, sp, #12
 800441e:	f7ff fedf 	bl	80041e0 <_printf_common>
 8004422:	3001      	adds	r0, #1
 8004424:	d14a      	bne.n	80044bc <_printf_i+0x1f8>
 8004426:	f04f 30ff 	mov.w	r0, #4294967295
 800442a:	b004      	add	sp, #16
 800442c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f043 0320 	orr.w	r3, r3, #32
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	2778      	movs	r7, #120	; 0x78
 800443a:	4832      	ldr	r0, [pc, #200]	; (8004504 <_printf_i+0x240>)
 800443c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	6829      	ldr	r1, [r5, #0]
 8004444:	061f      	lsls	r7, r3, #24
 8004446:	f851 6b04 	ldr.w	r6, [r1], #4
 800444a:	d402      	bmi.n	8004452 <_printf_i+0x18e>
 800444c:	065f      	lsls	r7, r3, #25
 800444e:	bf48      	it	mi
 8004450:	b2b6      	uxthmi	r6, r6
 8004452:	07df      	lsls	r7, r3, #31
 8004454:	bf48      	it	mi
 8004456:	f043 0320 	orrmi.w	r3, r3, #32
 800445a:	6029      	str	r1, [r5, #0]
 800445c:	bf48      	it	mi
 800445e:	6023      	strmi	r3, [r4, #0]
 8004460:	b91e      	cbnz	r6, 800446a <_printf_i+0x1a6>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	f023 0320 	bic.w	r3, r3, #32
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	2310      	movs	r3, #16
 800446c:	e7a6      	b.n	80043bc <_printf_i+0xf8>
 800446e:	4824      	ldr	r0, [pc, #144]	; (8004500 <_printf_i+0x23c>)
 8004470:	e7e4      	b.n	800443c <_printf_i+0x178>
 8004472:	4615      	mov	r5, r2
 8004474:	e7bd      	b.n	80043f2 <_printf_i+0x12e>
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	6826      	ldr	r6, [r4, #0]
 800447a:	1d18      	adds	r0, r3, #4
 800447c:	6961      	ldr	r1, [r4, #20]
 800447e:	6028      	str	r0, [r5, #0]
 8004480:	0635      	lsls	r5, r6, #24
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	d501      	bpl.n	800448a <_printf_i+0x1c6>
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	e002      	b.n	8004490 <_printf_i+0x1cc>
 800448a:	0670      	lsls	r0, r6, #25
 800448c:	d5fb      	bpl.n	8004486 <_printf_i+0x1c2>
 800448e:	8019      	strh	r1, [r3, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	4615      	mov	r5, r2
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	e7bc      	b.n	8004412 <_printf_i+0x14e>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	2100      	movs	r1, #0
 800449c:	1d1a      	adds	r2, r3, #4
 800449e:	602a      	str	r2, [r5, #0]
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	6862      	ldr	r2, [r4, #4]
 80044a4:	4628      	mov	r0, r5
 80044a6:	f000 f859 	bl	800455c <memchr>
 80044aa:	b108      	cbz	r0, 80044b0 <_printf_i+0x1ec>
 80044ac:	1b40      	subs	r0, r0, r5
 80044ae:	6060      	str	r0, [r4, #4]
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	2300      	movs	r3, #0
 80044b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ba:	e7aa      	b.n	8004412 <_printf_i+0x14e>
 80044bc:	462a      	mov	r2, r5
 80044be:	4649      	mov	r1, r9
 80044c0:	4640      	mov	r0, r8
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	47d0      	blx	sl
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0ad      	beq.n	8004426 <_printf_i+0x162>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	079b      	lsls	r3, r3, #30
 80044ce:	d413      	bmi.n	80044f8 <_printf_i+0x234>
 80044d0:	68e0      	ldr	r0, [r4, #12]
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	4298      	cmp	r0, r3
 80044d6:	bfb8      	it	lt
 80044d8:	4618      	movlt	r0, r3
 80044da:	e7a6      	b.n	800442a <_printf_i+0x166>
 80044dc:	2301      	movs	r3, #1
 80044de:	4632      	mov	r2, r6
 80044e0:	4649      	mov	r1, r9
 80044e2:	4640      	mov	r0, r8
 80044e4:	47d0      	blx	sl
 80044e6:	3001      	adds	r0, #1
 80044e8:	d09d      	beq.n	8004426 <_printf_i+0x162>
 80044ea:	3501      	adds	r5, #1
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	9903      	ldr	r1, [sp, #12]
 80044f0:	1a5b      	subs	r3, r3, r1
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	dcf2      	bgt.n	80044dc <_printf_i+0x218>
 80044f6:	e7eb      	b.n	80044d0 <_printf_i+0x20c>
 80044f8:	2500      	movs	r5, #0
 80044fa:	f104 0619 	add.w	r6, r4, #25
 80044fe:	e7f5      	b.n	80044ec <_printf_i+0x228>
 8004500:	080046a3 	.word	0x080046a3
 8004504:	080046b4 	.word	0x080046b4

08004508 <memmove>:
 8004508:	4288      	cmp	r0, r1
 800450a:	b510      	push	{r4, lr}
 800450c:	eb01 0402 	add.w	r4, r1, r2
 8004510:	d902      	bls.n	8004518 <memmove+0x10>
 8004512:	4284      	cmp	r4, r0
 8004514:	4623      	mov	r3, r4
 8004516:	d807      	bhi.n	8004528 <memmove+0x20>
 8004518:	1e43      	subs	r3, r0, #1
 800451a:	42a1      	cmp	r1, r4
 800451c:	d008      	beq.n	8004530 <memmove+0x28>
 800451e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004526:	e7f8      	b.n	800451a <memmove+0x12>
 8004528:	4601      	mov	r1, r0
 800452a:	4402      	add	r2, r0
 800452c:	428a      	cmp	r2, r1
 800452e:	d100      	bne.n	8004532 <memmove+0x2a>
 8004530:	bd10      	pop	{r4, pc}
 8004532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800453a:	e7f7      	b.n	800452c <memmove+0x24>

0800453c <_sbrk_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	2300      	movs	r3, #0
 8004540:	4d05      	ldr	r5, [pc, #20]	; (8004558 <_sbrk_r+0x1c>)
 8004542:	4604      	mov	r4, r0
 8004544:	4608      	mov	r0, r1
 8004546:	602b      	str	r3, [r5, #0]
 8004548:	f7fc ff52 	bl	80013f0 <_sbrk>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_sbrk_r+0x1a>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	b103      	cbz	r3, 8004556 <_sbrk_r+0x1a>
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	200002e8 	.word	0x200002e8

0800455c <memchr>:
 800455c:	4603      	mov	r3, r0
 800455e:	b510      	push	{r4, lr}
 8004560:	b2c9      	uxtb	r1, r1
 8004562:	4402      	add	r2, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	4618      	mov	r0, r3
 8004568:	d101      	bne.n	800456e <memchr+0x12>
 800456a:	2000      	movs	r0, #0
 800456c:	e003      	b.n	8004576 <memchr+0x1a>
 800456e:	7804      	ldrb	r4, [r0, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	428c      	cmp	r4, r1
 8004574:	d1f6      	bne.n	8004564 <memchr+0x8>
 8004576:	bd10      	pop	{r4, pc}

08004578 <memcpy>:
 8004578:	440a      	add	r2, r1
 800457a:	4291      	cmp	r1, r2
 800457c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004580:	d100      	bne.n	8004584 <memcpy+0xc>
 8004582:	4770      	bx	lr
 8004584:	b510      	push	{r4, lr}
 8004586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800458a:	4291      	cmp	r1, r2
 800458c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004590:	d1f9      	bne.n	8004586 <memcpy+0xe>
 8004592:	bd10      	pop	{r4, pc}

08004594 <_realloc_r>:
 8004594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004598:	4680      	mov	r8, r0
 800459a:	4614      	mov	r4, r2
 800459c:	460e      	mov	r6, r1
 800459e:	b921      	cbnz	r1, 80045aa <_realloc_r+0x16>
 80045a0:	4611      	mov	r1, r2
 80045a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045a6:	f7ff bc37 	b.w	8003e18 <_malloc_r>
 80045aa:	b92a      	cbnz	r2, 80045b8 <_realloc_r+0x24>
 80045ac:	f7ff fbcc 	bl	8003d48 <_free_r>
 80045b0:	4625      	mov	r5, r4
 80045b2:	4628      	mov	r0, r5
 80045b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b8:	f000 f81b 	bl	80045f2 <_malloc_usable_size_r>
 80045bc:	4284      	cmp	r4, r0
 80045be:	4607      	mov	r7, r0
 80045c0:	d802      	bhi.n	80045c8 <_realloc_r+0x34>
 80045c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045c6:	d812      	bhi.n	80045ee <_realloc_r+0x5a>
 80045c8:	4621      	mov	r1, r4
 80045ca:	4640      	mov	r0, r8
 80045cc:	f7ff fc24 	bl	8003e18 <_malloc_r>
 80045d0:	4605      	mov	r5, r0
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d0ed      	beq.n	80045b2 <_realloc_r+0x1e>
 80045d6:	42bc      	cmp	r4, r7
 80045d8:	4622      	mov	r2, r4
 80045da:	4631      	mov	r1, r6
 80045dc:	bf28      	it	cs
 80045de:	463a      	movcs	r2, r7
 80045e0:	f7ff ffca 	bl	8004578 <memcpy>
 80045e4:	4631      	mov	r1, r6
 80045e6:	4640      	mov	r0, r8
 80045e8:	f7ff fbae 	bl	8003d48 <_free_r>
 80045ec:	e7e1      	b.n	80045b2 <_realloc_r+0x1e>
 80045ee:	4635      	mov	r5, r6
 80045f0:	e7df      	b.n	80045b2 <_realloc_r+0x1e>

080045f2 <_malloc_usable_size_r>:
 80045f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f6:	1f18      	subs	r0, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bfbc      	itt	lt
 80045fc:	580b      	ldrlt	r3, [r1, r0]
 80045fe:	18c0      	addlt	r0, r0, r3
 8004600:	4770      	bx	lr
	...

08004604 <_init>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr

08004610 <_fini>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr
